package it.linksmt.teamshare.business.services.impl;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

import it.linksmt.converter.UtenteConverter;
import it.linksmt.teamshare.business.dtos.UserDto;
import it.linksmt.teamshare.business.request.UserRequestDto;
import it.linksmt.teamshare.business.services.UserService;
import it.linksmt.teamshare.dao.entities.User;
import it.linksmt.teamshare.dao.repositories.UserRepository;

@Service
public class UserServiceImpl implements UserService {

	@Autowired
	private UserRepository userRepository;

	@Override
	public List<UserDto> searchUsers() {
		List<User> users = (List<User>) userRepository.findAll();

		return UtenteConverter.MAPPER.toListaBancaDTOesponse(users);
	}

	@Override
	public List<UserDto> searchUsersBy(String firstName, String lastName,String email) {
		List<User> users = null;
		if(!StringUtils.isEmpty(email) && StringUtils.isEmpty(firstName) && StringUtils.isEmpty(lastName) ) {
			users = (List<User>) userRepository.findByEmail(email);
		} else if(StringUtils.isEmpty(email) && !StringUtils.isEmpty(firstName) && StringUtils.isEmpty(lastName)) {
			users = userRepository.findByFirstName(firstName);
		} else if(StringUtils.isEmpty(email) && StringUtils.isEmpty(firstName) && !StringUtils.isEmpty(lastName)) {
			users = userRepository.findByLastName(lastName);
		} else if(StringUtils.isEmpty(email) && !StringUtils.isEmpty(firstName) && !StringUtils.isEmpty(lastName)) {
			users = userRepository.findByFirstNameAndLastName(firstName, lastName);
		} else {
			users = (List<User>) userRepository.findAll();
		}
		return UtenteConverter.MAPPER.toListaBancaDTOesponse(users);
	}

	@Override
	public UserDto getUser(Integer id) {
		Optional<User> users = userRepository.findById(id);
//		user.setId(users.getId());
//		user.setFirstName(users.getFirstName());
//		user.setLastName(users.getLastName());
//		user.setEmail(users.getEmail());
		return UtenteConverter.MAPPER.toUserDTO(users.get());
	}

	@Override
	public UserDto addUser(UserRequestDto user) {
		User u = UtenteConverter.MAPPER.toUser(user);
		u = userRepository.save(u);
		
		return UtenteConverter.MAPPER.toUserDTO(u);
	}
	

	@Override
	public UserDto updateUser(Integer userId, UserRequestDto user) {
		User u = UtenteConverter.MAPPER.toUser(user);
		u.setId(userId);
		u = userRepository.save(u);
		return UtenteConverter.MAPPER.toUserDTO(u);
	}

	@Override
	public void deleteUser(Integer id) {
		userRepository.deleteById(id);
	}


}
