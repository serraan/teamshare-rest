package it.linksmt.teamshare.business.services.impl;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import it.linksmt.teamshare.business.dtos.UserDto;
import it.linksmt.teamshare.business.services.UserService;
import it.linksmt.teamshare.dao.entities.User;
import it.linksmt.teamshare.entities.utenteDAO;
import it.linksmt.teamshare.repository.UserRepository;

@Service
public class UserServiceImpl implements UserService {
	
	@Autowired
	private UserRepository userRepository;

	@Override
	public List<UserDto> searchUsers() {
		
		List<UserDto> dtos = new ArrayList<UserDto>();
		
		List<utenteDAO> users = userRepository.findAll();
		
		for (utenteDAO user : users) {
			UserDto dto = new UserDto();
			dto.setId(user.getId());
			dto.setFirstName(user.getFirstName());
			dto.setLastName(user.getLastName());
			dto.setBirthDate(user.getBirthDate());
			dto.setEmail(user.getEmail());
			dto.setPassword(user.getPassword());
			dtos.add(dto);
		}
		
		return dtos;
	}

	@Override
	public List<UserDto> getUsers() {
		List<UserDto> users = new ArrayList<UserDto>();

		return users;
	}

	@Override
	public UserDto getUser(Integer id) {
		UserDto user = new UserDto();
		User users = userRepository.findAllById(id);
		user.setId(users.getId());
		user.setFirstName(users.getFirstName());
		user.setLastName(users.getLastName());
		user.setEmail(users.getEmail());
		return user;
	}

	@Override
	public User addUser(UserDto user) {
		User u = new User();
		u.setFirstName(user.getFirstName());
		u.setLastName(user.getLastName());
		u.setBirthDate(user.getBirthDate());
		u.setEmail(user.getEmail());
		
		//TODO Criptare password
		u.setPassword(user.getPassword());
		u = userRepository.save(u);
		
		return u;
	}

	@Override
	public User updateUser(UserDto user) {
		User u = new User();
		u.setId(user.getId());
		u.setFirstName(user.getFirstName());
		u.setLastName(user.getLastName());
		u.setBirthDate(user.getBirthDate());
		u.setEmail(user.getEmail());
		u.setPassword(user.getPassword());
		
		u = userRepository.save(u);
		return u;
	}
	
	@Override
	public void deleteUser(Integer id) {
		userRepository.deleteById(id);
	}

}
