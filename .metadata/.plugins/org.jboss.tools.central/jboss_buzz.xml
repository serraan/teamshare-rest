<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>All Things Open 2018 – How To Jump Start a Career in Open Source (video)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/poZe4QlIk4k/" /><category term="community" scheme="searchisko:content:tags" /><category term="conference" scheme="searchisko:content:tags" /><category term="Developer Events" scheme="searchisko:content:tags" /><category term="events" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="opensource" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-all_things_open_2018_how_to_jump_start_a_career_in_open_source_video</id><updated>2018-12-14T17:00:26Z</updated><published>2018-12-14T17:00:26Z</published><content type="html">&lt;p&gt;Last October I was in Raleigh, North Carolina speaking at &lt;a href="https://allthingsopen.org/"&gt;All Things Open&lt;/a&gt;.  I &lt;a href="http://www.schabell.org/2018/10/all-things-open-2018-lightning-talk.html"&gt;gave a lightning talk&lt;/a&gt; on how to jump start a career in open source, in just 6 minutes.&lt;/p&gt; &lt;p&gt;The topic is near and dear to my heart, so as a lightning talk it was fun to promote the full session I gave earlier this Summer in one of the most amazing venues I&amp;#8217;ve ever spoken at.&lt;/p&gt; &lt;p&gt;The talk includes links to the recording of that venue and the complete story I told. After the talk I &lt;a href="https://www.schabell.org/2018/10/all-things-open-2018-lightning-talk-slides.html"&gt;posted the slides&lt;/a&gt;, but we&amp;#8217;ve been waiting on the video recording of the session and it&amp;#8217;s arrived!&lt;span id="more-545057"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h3&gt;The recording&lt;/h3&gt; &lt;p&gt;I can&amp;#8217;t tell you how much fun it was in just a few words, but I soundly recommend that you put All Things Open on your wish list for 2019. They run a fantastic conference, take good care of their speakers, and the infrastructure is as good as it gets. Here&amp;#8217;s the recording of my talk:&lt;/p&gt; &lt;div align="center"&gt; &lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/LQ2BYca8u48?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt; &lt;/div&gt; &lt;p&gt;For completeness, here is the original abstract:&lt;/p&gt; &lt;h3&gt;Lightning Talk &amp;#8211; How to Jump Start a Career in Open Source&lt;/h3&gt; &lt;p&gt;&lt;i&gt;It&amp;#8217;s not wishful thinking. It&amp;#8217;s not luck. It&amp;#8217;s not going to happen by itself, so what&amp;#8217;s the secret sauce? Understanding what makes a career in open source grow, what choices are crucial, and what actions accelerate or damage your open source future are sometimes hard to grasp. Learning to position, expand and grow your personal brand in the open source world is what this session provides. Be ready for your next step in open source.&lt;/i&gt;&lt;/p&gt; &lt;p&gt;&lt;i&gt;Date: Tuesday, OCT 23&lt;/i&gt;&lt;br /&gt; &lt;i&gt;Time: 12:45 PM, local time&lt;/i&gt;&lt;/p&gt; &lt;p&gt;I hope to see you next October at &lt;a href="https://allthingsopen.org/"&gt;All Things Open 2019&lt;/a&gt;!  It&amp;#8217;s a great conference that I highly recommend.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;em&gt;&lt;strong&gt;View &lt;a href="https://developers.redhat.com/blog/author/ericschabell/"&gt;my other articles&lt;/a&gt; on the Red Hat Developer Blog&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F14%2Fhow-to-jump-start-a-career-in-open-source-video%2F&amp;#38;linkname=All%20Things%20Open%202018%20%E2%80%93%20How%20To%20Jump%20Start%20a%20Career%20in%20Open%20Source%20%28video%29" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F14%2Fhow-to-jump-start-a-career-in-open-source-video%2F&amp;#38;linkname=All%20Things%20Open%202018%20%E2%80%93%20How%20To%20Jump%20Start%20a%20Career%20in%20Open%20Source%20%28video%29" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F14%2Fhow-to-jump-start-a-career-in-open-source-video%2F&amp;#38;linkname=All%20Things%20Open%202018%20%E2%80%93%20How%20To%20Jump%20Start%20a%20Career%20in%20Open%20Source%20%28video%29" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F14%2Fhow-to-jump-start-a-career-in-open-source-video%2F&amp;#38;linkname=All%20Things%20Open%202018%20%E2%80%93%20How%20To%20Jump%20Start%20a%20Career%20in%20Open%20Source%20%28video%29" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F14%2Fhow-to-jump-start-a-career-in-open-source-video%2F&amp;#38;linkname=All%20Things%20Open%202018%20%E2%80%93%20How%20To%20Jump%20Start%20a%20Career%20in%20Open%20Source%20%28video%29" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F14%2Fhow-to-jump-start-a-career-in-open-source-video%2F&amp;#38;linkname=All%20Things%20Open%202018%20%E2%80%93%20How%20To%20Jump%20Start%20a%20Career%20in%20Open%20Source%20%28video%29" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F14%2Fhow-to-jump-start-a-career-in-open-source-video%2F&amp;#38;linkname=All%20Things%20Open%202018%20%E2%80%93%20How%20To%20Jump%20Start%20a%20Career%20in%20Open%20Source%20%28video%29" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F14%2Fhow-to-jump-start-a-career-in-open-source-video%2F&amp;#38;linkname=All%20Things%20Open%202018%20%E2%80%93%20How%20To%20Jump%20Start%20a%20Career%20in%20Open%20Source%20%28video%29" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F14%2Fhow-to-jump-start-a-career-in-open-source-video%2F&amp;#038;title=All%20Things%20Open%202018%20%E2%80%93%20How%20To%20Jump%20Start%20a%20Career%20in%20Open%20Source%20%28video%29" data-a2a-url="https://developers.redhat.com/blog/2018/12/14/how-to-jump-start-a-career-in-open-source-video/" data-a2a-title="All Things Open 2018 – How To Jump Start a Career in Open Source (video)"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/12/14/how-to-jump-start-a-career-in-open-source-video/"&gt;All Things Open 2018 &amp;#8211; How To Jump Start a Career in Open Source (video)&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/poZe4QlIk4k" height="1" width="1" alt=""/&gt;</content><summary>Last October I was in Raleigh, North Carolina speaking at All Things Open.  I gave a lightning talk on how to jump start a career in open source, in just 6 minutes. The topic is near and dear to my heart, so as a lightning talk it was fun to promote the full session I gave earlier this Summer in one of the most amazing venues I’ve ever spoken at. The talk includes links to the recording of that ve...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2018-12-14T17:00:26Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/12/14/how-to-jump-start-a-career-in-open-source-video/</feedburner:origLink></entry><entry><title>Integration of external application details (Part 3)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/5by3MhYfIhA/" /><category term="Agile Integration" scheme="searchisko:content:tags" /><category term="Architecture" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="Customer Experience" scheme="searchisko:content:tags" /><category term="developers" scheme="searchisko:content:tags" /><category term="devops" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="integration" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="mobile" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="Red Hat Customers" scheme="searchisko:content:tags" /><category term="Red Hat Mobile Application Platform" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-integration_of_external_application_details_part_3</id><updated>2018-12-14T13:00:50Z</updated><published>2018-12-14T13:00:50Z</published><content type="html">&lt;p&gt;In &lt;a href="https://developers.redhat.com/blog/2018/11/30/common-architectural-elements-for-modern-integration-architectures/"&gt;Part 2 of this series&lt;/a&gt;, we took a high-level view of the common architectural elements that determine how your integration becomes the key to transforming your customer experience.&lt;/p&gt; &lt;p&gt;I laid out how I&amp;#8217;ve approached the use case and how I&amp;#8217;ve used successful customer portfolio solutions as the basis for researching a generic architectural blueprint. The only thing left to cover was the order in which you&amp;#8217;ll be led through the blueprint details.&lt;/p&gt; &lt;p&gt;This article takes you deeper to cover details pertaining to the specific elements (&lt;i&gt;mobile and web application deployments)&lt;/i&gt; of the generic architectural overview.&lt;/p&gt; &lt;p&gt;&lt;span id="more-543647"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Architectural details&lt;/h2&gt; &lt;p&gt;As mentioned before, the architectural details covered in this series are based on real customer integration solutions using open source technologies. The elements presented here are then the &lt;i&gt;generic common architectural elements&lt;/i&gt; that I&amp;#8217;ve identified and collected into the generic architectural blueprint. It&amp;#8217;s my intent to provide a blueprint that provides guidance and not deep technical details.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screenshot-2018-11-14-at-22.02.50.png"&gt;&lt;img class=" aligncenter wp-image-548787 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screenshot-2018-11-14-at-22.02.50.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screenshot-2018-11-14-at-22.02.50.png" alt="External application deployments" width="320" height="34" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screenshot-2018-11-14-at-22.02.50.png 320w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screenshot-2018-11-14-at-22.02.50-300x32.png 300w" sizes="(max-width: 320px) 100vw, 320px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This section covers the visual representations as presented, but it&amp;#8217;s expected that they&amp;#8217;ll be evolving visually over time. There are many ways to represent each element in this architectural blueprint, but I&amp;#8217;ve chosen icons, text, and colors that I hope are going to make it all easy to absorb. Feel free to post comments at the bottom of this post or &lt;a href="https://www.schabell.org/p/contact.html"&gt;contact me directly&lt;/a&gt; with your feedback.&lt;/p&gt; &lt;p&gt;Now let&amp;#8217;s take a look at the details in this architecture and outline the elements uncovered in my research.&lt;/p&gt; &lt;h2&gt;Mobile applications&lt;/h2&gt; &lt;p&gt;External application deployments are split between mobile and web applications. Both are generic broad terms used to describe the types of application deployments discovered in the researched customers.&lt;/p&gt; &lt;p&gt;&lt;i&gt;Mobile applications&lt;/i&gt; are anything not specific to the web, such as an application for mobile phones, tablets, or some sort of portable device not specifically defined. It&amp;#8217;s what customers are using to interact directly with a company. This can be mobile applications deployed by the company itself or developed by third-party organizations to interact with the services offered.&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter wp-image-548797 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screenshot-2018-11-30-at-16.12.20.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screenshot-2018-11-30-at-16.12.20.png" alt="Mobile applications" width="320" height="211" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screenshot-2018-11-30-at-16.12.20.png 320w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screenshot-2018-11-30-at-16.12.20-300x198.png 300w" sizes="(max-width: 320px) 100vw, 320px" /&gt;&lt;/p&gt; &lt;p&gt;These applications can be created using many different languages and libraries, and they can target diverse platforms. Research showed that integration through the use of a mobile application platform, such as &lt;a href="https://developers.redhat.com/products/mobileplatform/overview/"&gt;Red Hat Mobile Application Platform&lt;/a&gt;, was favored above DIY mobile development to provide a platform for managing and maintaining mobile application development, integration, and deployment.&lt;/p&gt; &lt;p&gt;These applications link customers to a company&amp;#8217;s solutions and can encompass voice, video, and/or chat features. They access the organization through the API gateway using single sign-on for security. Interactions go through the following microservices:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Front-end microservices (providing access to internal integration microservices)&lt;/li&gt; &lt;li&gt;Process facade microservices (providing access to automated integration processes)&lt;/li&gt; &lt;li&gt;Other applications (providing access to aggregated microservices or other internal applications)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;When external applications are not deployed on mobile devices, then we&amp;#8217;re looking at &lt;i&gt;web applications.&lt;/i&gt;&lt;/p&gt; &lt;h2&gt;Web applications&lt;/h2&gt; &lt;p&gt;The &lt;i&gt;web applications&lt;/i&gt; category is for all other types of applications, for example, websites and/or services that are deployed by a company or any third-party organizations to interact with the services offered.&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter wp-image-548817 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screenshot-2018-11-29-at-13.53.53.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screenshot-2018-11-29-at-13.53.53.png" alt="Web applications" width="320" height="224" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screenshot-2018-11-29-at-13.53.53.png 320w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/Screenshot-2018-11-29-at-13.53.53-300x210.png 300w" sizes="(max-width: 320px) 100vw, 320px" /&gt;&lt;/p&gt; &lt;p&gt;While in the traditional sense web applications can be anything hosted outside the company, we&amp;#8217;ve encountered an internal (to the researched organization) helpdesk application that contained an interactive voice response (IVR) system integrated with email and text options. The solution treated this helpdesk application as an external web application for integration purposes and constructed the necessary &lt;a href="https://developers.redhat.com/blog/category/microservices/"&gt;microservices&lt;/a&gt; to interact with its API layer.&lt;/p&gt; &lt;p&gt;These applications link customers to a company&amp;#8217;s solutions or provide external third-party information to a company&amp;#8217;s information architecture to enrich the customers&amp;#8217; experiences. They access the organization through the API gateway using single sign-on for security. Interactions go through the following microservices:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Front-end microservices (providing access to internal integration microservices)&lt;/li&gt; &lt;li&gt;Process facade microservices (providing access to automated integration processes)&lt;/li&gt; &lt;li&gt;Other applications (providing access to aggregated microservices or other internal applications)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;These details are not all-telling, but they should give you the guidance you&amp;#8217;d need to get started in your own architectural situations.&lt;/p&gt; &lt;h2&gt;What&amp;#8217;s next&lt;/h2&gt; &lt;p&gt;This overview covers the external applications deployment elements that make up our architecture blueprint for the ominchannel customer experience use case.&lt;/p&gt; &lt;p&gt;An overview of the series on omnichannel customer experience portfolio architecture blueprint can be found here:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/11/28/integration-is-key-to-customer-experience/"&gt;Part 1: How integration is key to customer experience&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/11/30/common-architectural-elements-for-modern-integration-architectures/"&gt;Part 2: Common architectural elements for modern integration architectures&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Part 3: Integration of external application details (this article)&lt;/li&gt; &lt;li&gt;Part 4: Application integration details&lt;/li&gt; &lt;li&gt;Part 5: Dissecting several specific application integration architectures&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Catch up on any articles you missed by following one of the links above.&lt;/p&gt; &lt;p&gt;Next in this series, we&amp;#8217;ll be taking a look at the application integration details for omnichannel customer experience.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F14%2Fintegration-of-external-application-details-part-3%2F&amp;#38;linkname=Integration%20of%20external%20application%20details%20%28Part%203%29" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F14%2Fintegration-of-external-application-details-part-3%2F&amp;#38;linkname=Integration%20of%20external%20application%20details%20%28Part%203%29" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F14%2Fintegration-of-external-application-details-part-3%2F&amp;#38;linkname=Integration%20of%20external%20application%20details%20%28Part%203%29" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F14%2Fintegration-of-external-application-details-part-3%2F&amp;#38;linkname=Integration%20of%20external%20application%20details%20%28Part%203%29" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F14%2Fintegration-of-external-application-details-part-3%2F&amp;#38;linkname=Integration%20of%20external%20application%20details%20%28Part%203%29" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F14%2Fintegration-of-external-application-details-part-3%2F&amp;#38;linkname=Integration%20of%20external%20application%20details%20%28Part%203%29" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F14%2Fintegration-of-external-application-details-part-3%2F&amp;#38;linkname=Integration%20of%20external%20application%20details%20%28Part%203%29" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F14%2Fintegration-of-external-application-details-part-3%2F&amp;#38;linkname=Integration%20of%20external%20application%20details%20%28Part%203%29" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F14%2Fintegration-of-external-application-details-part-3%2F&amp;#038;title=Integration%20of%20external%20application%20details%20%28Part%203%29" data-a2a-url="https://developers.redhat.com/blog/2018/12/14/integration-of-external-application-details-part-3/" data-a2a-title="Integration of external application details (Part 3)"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/12/14/integration-of-external-application-details-part-3/"&gt;Integration of external application details (Part 3)&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/5by3MhYfIhA" height="1" width="1" alt=""/&gt;</content><summary>In Part 2 of this series, we took a high-level view of the common architectural elements that determine how your integration becomes the key to transforming your customer experience. I laid out how I’ve approached the use case and how I’ve used successful customer portfolio solutions as the basis for researching a generic architectural blueprint. The only thing left to cover was the order in which...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2018-12-14T13:00:50Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/12/14/integration-of-external-application-details-part-3/</feedburner:origLink></entry><entry><title>JBoss Weekly Editorial 2018-12-13</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/-Chn-ENQuKw/jboss-weekly-editorial-2018-12-13" /><category term="apache-camel" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_weeklyeditorial" scheme="searchisko:content:tags" /><category term="hibernate-orm" scheme="searchisko:content:tags" /><category term="hibernate-search" scheme="searchisko:content:tags" /><category term="infinispan" scheme="searchisko:content:tags" /><category term="jBPM" scheme="searchisko:content:tags" /><category term="keycloak" scheme="searchisko:content:tags" /><category term="weekly_editorial" scheme="searchisko:content:tags" /><author><name>Jason Porter</name></author><id>searchisko:content:id:jbossorg_blog-jboss_weekly_editorial_2018_12_13</id><updated>2018-12-14T01:17:05Z</updated><published>2018-12-14T01:17:00Z</published><content type="html">&lt;!-- [DocumentBodyStart:1333882a-a85e-4b00-b7df-d881f6062122] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;div&gt;&lt;div&gt;&lt;div class="sectionbody"&gt;&lt;div class="paragraph"&gt;&lt;p&gt;All of us are getting ready for the Holiday Season, thank you for taking some time catching up with us this week! The past couple of weeks can be summed up in three words: Releases, jBPM, Integration! Let&amp;#8217;s do a quick recap in that order.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="sect1"&gt;&lt;h2&gt;Releases&lt;/h2&gt;&lt;div class="sectionbody"&gt;&lt;div class="ulist"&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="http://www.davsclaus.com/2018/11/apache-camel-223-released.html" rel="nofollow"&gt;Camel 2.23&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="http://blog.keycloak.org/2018/12/keycloak-470final-released.html" rel="nofollow"&gt;Keycloak 4.7.0.Final&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="http://in.relation.to/2018/12/05/hibernate-search-5-11-0-CR1/" rel="nofollow"&gt;Hibernate Search 5.11.0.CR1&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="http://in.relation.to/2018/12/06/hibernate-orm-600-alpha1-out/" rel="nofollow"&gt;Hibernate ORM 6.0.0.Alpha1&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="http://in.relation.to/2018/12/12/hibernate-orm-540-final-out/" rel="nofollow"&gt;Hibernate ORM 5.4.0.Final&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="https://blog.infinispan.org/2018/12/infinispan-944final-and-1000alpha2-out.html" rel="nofollow"&gt;Infinispan 9.4.4.Final and 10.0.0.Alpha2&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="https://blog.infinispan.org/2018/12/infinispan-spring-boot-211final-and.html" rel="nofollow"&gt;Infinispan Spring Boot Starter 2.1.1.Final and 1.0.4.Final&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="sect1"&gt;&lt;h2&gt;&lt;/h2&gt;&lt;h2&gt;jBPM&lt;/h2&gt;&lt;div class="sectionbody"&gt;&lt;div class="paragraph"&gt;&lt;p&gt;There were a number of blog posts in the jBPM realm over the past couple of weeks. They&amp;#8217;ll make for some great reading and a good way to catch up on what&amp;#8217;s going on in that space!&lt;/p&gt;&lt;/div&gt;&lt;div class="ulist"&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="http://mswiderski.blogspot.com/2018/12/using-apache-kafka-in-your-jbpm.html" rel="nofollow"&gt;Using Kafka in jBPM&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="http://mswiderski.blogspot.com/2018/12/starting-your-jbpm-business-application.html" rel="nofollow"&gt;Using jBPM as a Service&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="http://mswiderski.blogspot.com/2018/12/jbpm-business-applications-demo-process.html" rel="nofollow"&gt;Process terminal using Spring Shell&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="http://mswiderski.blogspot.com/2018/12/deploying-jbpm-business-apps-on-docker.html" rel="nofollow"&gt;Deploying jBPM Apps on Docker&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="sect1"&gt;&lt;h2&gt;&lt;/h2&gt;&lt;h2&gt;Integration&lt;/h2&gt;&lt;div class="sectionbody"&gt;&lt;div class="paragraph"&gt;&lt;p&gt;Lastly, we have a few blog posts dealing with integration:&lt;/p&gt;&lt;/div&gt;&lt;div class="ulist"&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="http://www.davsclaus.com/2018/12/work-on-apache-camel-3-has-finally.html" rel="nofollow"&gt;Camel 3 starting&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="https://www.nicolaferraro.me/2018/12/10/camel-k-on-knative/" rel="nofollow"&gt;Camel K on Knative&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="http://www.schabell.org/2018/12/integration-key-to-customer-experience-api-management-details.html" rel="nofollow"&gt;API Management Details&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class="paragraph"&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Thanks again for sharing some time with us, see you next time!&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:1333882a-a85e-4b00-b7df-d881f6062122] --&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/-Chn-ENQuKw" height="1" width="1" alt=""/&gt;</content><summary>All of us are getting ready for the Holiday Season, thank you for taking some time catching up with us this week! The past couple of weeks can be summed up in three words: Releases, jBPM, Integration! Let’s do a quick recap in that order.   Releases Camel 2.23 Keycloak 4.7.0.Final Hibernate Search 5.11.0.CR1 Hibernate ORM 6.0.0.Alpha1 Hibernate ORM 5.4.0.Final Infinispan 9.4.4.Final and 10.0.0.Alp...</summary><dc:creator>Jason Porter</dc:creator><dc:date>2018-12-14T01:17:00Z</dc:date><feedburner:origLink>https://developer.jboss.org/blogs/weekly-editorial/2018/12/13/jboss-weekly-editorial-2018-12-13</feedburner:origLink></entry><entry><title>WildFly 15 is released!</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/FZQtey3Tz_k/" /><category term="Announcement" scheme="searchisko:content:tags" /><category term="feed_group_name_jbossas" scheme="searchisko:content:tags" /><category term="feed_name_wildfly" scheme="searchisko:content:tags" /><category term="release" scheme="searchisko:content:tags" /><author><name>Jason Greene</name></author><id>searchisko:content:id:jbossorg_blog-wildfly_15_is_released</id><updated>2018-12-13T21:00:00Z</updated><published>2018-12-13T21:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;WildFly 15 Final is now available &lt;a href="http://wildfly.org/downloads"&gt;for download&lt;/a&gt;!&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This is our fourth release following our &lt;a href="http://lists.jboss.org/pipermail/wildfly-dev/2017-December/006250.html"&gt;quarterly delivery model&lt;/a&gt;. The major objective of this year’s release plan was to deliver EE8 functionality in incremental chunks over the first three quarters, and then to ensure WildFly ran well on the latest long term support version of Java. Accordingly, in this fourth release our focus was less on new features and more on polishing our support for JDK 11.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_jdk_11_support"&gt;JDK 11 Support&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The modularization of the JVM that began with Java 9 has a significant impact on a complex server like WildFly, particularly in the areas of classloading and reflection, both of which are extensively used in any application server. Since the early days of Java 9 development we’ve been working to ensure that not only the WildFly code itself, but also the scores of libraries we integrate, would all run well on the later generation JVMs. Specifically we wanted to be sure we ran well on the first long term supported Java version under the &lt;a href="https://mreinhold.org/blog/forward-faster"&gt;new Java SE release cadence&lt;/a&gt;, Java 11. We’re proud to say we’ve achieved that goal in our first quarterly release since Java 11 itself went GA.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;WildFly 15 also is heavily tested and runs well on Java 8. We also do testing with non-LTS releases like Java 9 and 10, and aim to run reasonably well for most use cases on those, but the primary aim of that kind of testing is to identify problems early enough to resolve them for the upcoming LTS release.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Please note that WildFly runs on Java 11 in classpath mode.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_server_observability"&gt;Server Observability&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Continuing the effort from WildFly 14 to improve the ability of tools to observe the behavior of WildFly in a container environment, in WildFly 15 we added a new subsystem that brings tech-preview support for MicroProfile Metrics. Application authors can declare their own application-scoped metrics, and those as well as base metrics will be available in Prometheus or JSON format over a new /metrics context on the HTTP management interface.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_sni_support_for_https_listeners"&gt;SNI Support for HTTPS Listeners&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;WildFly 15 supports server side SNI on its HTTPS listeners. This allows a WildFly instance listening on a single socket but with multiple virtual hosts associated with that listener to provide a different server certificate depending on what SNI name the client requests.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_default_ssl_context"&gt;Default SSL Context&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Setting a simple attribute on the Elytron subsystem ensures that as the server is started a JVM-wide default SSLContext is registered for use by any libraries within the application server that support use of the default context.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_jaspic_integration_with_elytron"&gt;JASPIC Integration with Elytron&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The Elytron subsystem now provides support for the Servlet Container Profile of the &lt;a href="https://www.jcp.org/en/jsr/detail?id=196"&gt;JSR-196&lt;/a&gt; Java Authentication SPI for Containers spec.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_jira_release_notes"&gt;Jira Release Notes&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The full list of issues resolved is available &lt;a href="https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12313721&amp;amp;version=12339953"&gt;here&lt;/a&gt;. Issues resolved in the WildFly Core 7 release included with WildFly 15 are available &lt;a href="https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12315422&amp;amp;version=12340009"&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/FZQtey3Tz_k" height="1" width="1" alt=""/&gt;</content><summary>WildFly 15 Final is now available for download! This is our fourth release following our quarterly delivery model. The major objective of this year’s release plan was to deliver EE8 functionality in incremental chunks over the first three quarters, and then to ensure WildFly ran well on the latest long term support version of Java. Accordingly, in this fourth release our focus was less on new feat...</summary><dc:creator>Jason Greene</dc:creator><dc:date>2018-12-13T21:00:00Z</dc:date><feedburner:origLink>http://wildfly.org/news/2018/12/13/WildFly15-Final-Released/</feedburner:origLink></entry><entry><title>Building .NET Core container images using S2I</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/ZaQI5xLfUyw/" /><category term=".net" scheme="searchisko:content:tags" /><category term=".NET Core" scheme="searchisko:content:tags" /><category term="builds" scheme="searchisko:content:tags" /><category term="ci/cd" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="DotNet" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="images" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift Container Platform" scheme="searchisko:content:tags" /><category term="s2i" scheme="searchisko:content:tags" /><category term="source-to-image" scheme="searchisko:content:tags" /><author><name>Tom Deseyn</name></author><id>searchisko:content:id:jbossorg_blog-building_net_core_container_images_using_s2i</id><updated>2018-12-13T17:26:11Z</updated><published>2018-12-13T17:26:11Z</published><content type="html">&lt;p&gt;&lt;a href="https://openshift.com"&gt;Red Hat OpenShift&lt;/a&gt; implements &lt;a href="https://developers.redhat.com/blog/category/dot-net/"&gt;.NET Core&lt;/a&gt; support via a source-to-image (S2I) builder. In this article, we’ll take a closer look at how you can use that builder directly. Using S2I, you can build .NET Core application images without having to write custom build scripts or Dockerfiles. This can be useful on your development machine or as part of a &lt;a href="https://developers.redhat.com/blog/category/ci-cd/"&gt;CI/CD&lt;/a&gt; pipeline.&lt;/p&gt; &lt;p&gt;&lt;span id="more-543237"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Containers for your builds&lt;/h2&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/category/containers/"&gt;Container&lt;/a&gt; images provide an efficient mechanism to deploy self-contained applications in a portable way across clouds and OS distributions.&lt;/p&gt; &lt;p&gt;By building the application images themselves using a builder image, the application images can be built in a portable, reproducible way.&lt;/p&gt; &lt;p&gt;S2I is a toolkit for building reproducible application images. S2I uses builder images to produce application images from source code or pre-compiled applications.&lt;/p&gt; &lt;pre&gt;application source/ +-------+ prebuilt application +--&amp;#62; | s2i | +--&amp;#62; application image +-------+ ^ builder image &lt;/pre&gt; &lt;p&gt;On Fedora and &lt;a href="https://developers.redhat.com/products/rhel/overview/"&gt;Red Hat Enterprise Linux&lt;/a&gt; (RHEL), you can obtain S2I by installing the &lt;code&gt;source-to-image&lt;/code&gt; package (&lt;code&gt;yum install source-to-image&lt;/code&gt;). If you are using another OS, including Windows and macOS, you can download S2I from &lt;a href="https://github.com/openshift/source-to-image/releases"&gt;github.com/openshift/source-to-image/releases&lt;/a&gt;. You’ll also need to install &lt;code&gt;docker&lt;/code&gt; and &lt;code&gt;git&lt;/code&gt;, which are used by &lt;code&gt;s2i&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;.NET Core builder images&lt;/h2&gt; &lt;p&gt;A builder image is available for each .NET Core version. These images are built from the Dockerfiles at &lt;a href="https://github.com/redhat-developer/s2i-dotnetcore"&gt;github.com/redhat-developer/s2i-dotnetcore&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For .NET Core 2.1, these images are available as follows:&lt;/p&gt; &lt;table class="large-24 small-24 downloads-table" width="1500"&gt; &lt;thead&gt; &lt;tr&gt; &lt;th scope="col"&gt;OS base&lt;/th&gt; &lt;th scope="col"&gt;Image Type&lt;/th&gt; &lt;th scope="col"&gt;Image Name&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;RHEL 7&lt;/td&gt; &lt;td&gt;Runtime&lt;/td&gt; &lt;td&gt;registry.redhat.io/dotnet/dotnet-21-runtime-rhel7:2.1&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;RHEL 7&lt;/td&gt; &lt;td&gt;SDK&lt;/td&gt; &lt;td&gt;registry.redhat.io/dotnet/dotnet-21-rhel7:2.1&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;CentOS 7&lt;/td&gt; &lt;td&gt;Runtime&lt;/td&gt; &lt;td&gt;registry.centos.org/dotnet/dotnet-21-runtime-centos7:latest&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;CentOS 7&lt;/td&gt; &lt;td&gt;SDK&lt;/td&gt; &lt;td&gt;registry.centos.org/dotnet/dotnet-21-centos7:latest&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;If you are looking for a different .NET Core version, you can check the &lt;a href="https://access.redhat.com/containers/"&gt;Red Hat Container Catalog&lt;/a&gt; or the &lt;a href="https://registry.centos.org/"&gt;CentOS Container Registry&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To use the RHEL 7 images, you need a Red Hat subscription. For development, you can use the &lt;a href="https://developers.redhat.com/register"&gt;free development subscription&lt;/a&gt;. Use the &lt;code&gt;docker login registry.redhat.io&lt;/code&gt; command to configure your credentials.&lt;/p&gt; &lt;h2&gt;Building images&lt;/h2&gt; &lt;p&gt;The sections below describe three ways you can build your images.&lt;/p&gt; &lt;h3&gt;Building an application image from a git repository&lt;/h3&gt; &lt;p&gt;As our first, example, we’ll build an application image named &lt;code&gt;mywebapp&lt;/code&gt; for the ASP.NET Core application at &lt;a href="https://github.com/redhat-developer/s2i-dotnetcore-ex"&gt;github.com/redhat-developer/s2i-dotnetcore-ex&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;$ s2i build https://github.com/redhat-developer/s2i-dotnetcore-ex registry.redhat.io/dotnet/dotnet-21-rhel7:2.1 mywebapp -r dotnetcore-2.1 -e DOTNET_STARTUP_PROJECT=app -p always &lt;/pre&gt; &lt;p&gt;When we run this command, we’ll see &lt;code&gt;s2i&lt;/code&gt; check out the sources and build the .NET Core application image. When the command finishes, we can run the newly created image:&lt;/p&gt; &lt;pre&gt;$ docker run --rm -p 8080:8080 mywebapp &lt;/pre&gt; &lt;p&gt;Let’s look at the parameters we’ve passed to the &lt;code&gt;s2i&lt;/code&gt; command:&lt;/p&gt; &lt;table class="large-24 small-24 downloads-table" width="1500"&gt; &lt;thead&gt; &lt;tr&gt; &lt;th scope="col"&gt;Parameter&lt;/th&gt; &lt;th scope="col"&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;registry.redhat.io/dotnet-21-rhel7:2.1&lt;/td&gt; &lt;td&gt;S2I builder image&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;https://&amp;#8230;/s2i-dotnetcore-ex&lt;/td&gt; &lt;td&gt;The git repository&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;-r dotnetcore-2.1&lt;/td&gt; &lt;td&gt;Branch in the repository&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;-e DOTNET_STARTUP_PROJECT=app&lt;/td&gt; &lt;td&gt;Folder in the repository that contains the application csproj file&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;-p always&lt;/td&gt; &lt;td&gt;Always pull the latest builder image&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;The &lt;code&gt;-e DOTNET_STARTUP_PROJECT&lt;/code&gt; is an environment variable passed to the S2I builder. The builder supports a number of environment variables that allow you to customize its behavior. See the &lt;a href="https://access.redhat.com/documentation/en-us/net_core/2.1/html/getting_started_guide/gs_dotnet_on_openshift#gs_env-var"&gt;environment variables documentation&lt;/a&gt; for a complete list.&lt;/p&gt; &lt;h3&gt;Building an application image from local sources&lt;/h3&gt; &lt;p&gt;The source parameter for the &lt;code&gt;s2i&lt;/code&gt; command can also refer to a local folder that contains the source code. In the following example, we clone the repository locally and check out the appropriate branch into the &lt;code&gt;s2i-dotnetcore-ex&lt;/code&gt; folder. Then we build from that local folder.&lt;/p&gt; &lt;pre&gt;$ git clone -b dotnetcore-2.1 https://github.com/redhat-developer/s2i-dotnetcore-ex $ s2i build s2i-dotnetcore-ex registry.redhat.io/dotnet/dotnet-21-rhel7:2.1 mywebapp -r dotnetcore-2.1 -e DOTNET_STARTUP_PROJECT=app -p always &lt;/pre&gt; &lt;p&gt;We can run the image using the same &lt;code&gt;docker run&lt;/code&gt; command as before.&lt;/p&gt; &lt;h3&gt;Building an application image from a pre-built application&lt;/h3&gt; &lt;p&gt;The .NET Core builder can also be used to build an application image from a pre-built application.&lt;/p&gt; &lt;p&gt;To explore this, we first publish the &lt;code&gt;s2i-dotnetcore-ex&lt;/code&gt; application. To do that, you need to install a .NET SDK on your system (&lt;a href="https://access.redhat.com/documentation/en-us/net_core/2.1/html/getting_started_guide/gs_install_dotnet#install_dotnet21"&gt;RHEL7&lt;/a&gt;/&lt;a href="https://access.redhat.com/documentation/en-us/net_core/2.1/html/getting_started_guide/gs_install_dotnet#install_dotnet21"&gt;CentOS7&lt;/a&gt;, &lt;a href="https://fedoraloves.net/"&gt;Fedora&lt;/a&gt;, &lt;a href="https://www.microsoft.com/net/download"&gt;other&lt;/a&gt;).&lt;/p&gt; &lt;pre&gt;$ git clone -b dotnetcore-2.1 https://github.com/redhat-developer/s2i-dotnetcore-ex $ cd s2i-dotnetcore-ex/app $ dotnet publish -c Release /p:MicrosoftNETPlatformLibrary=Microsoft.NETCore.App &lt;/pre&gt; &lt;p&gt;We are specifying the &lt;code&gt;MicrosoftNETPlatformLibrary&lt;/code&gt; parameter to make the published application contain the ASP.NET Core shared framework assemblies. This is needed because the images don’t contain the shared framework.&lt;/p&gt; &lt;p&gt;To create the image, we pass the &lt;code&gt;publish&lt;/code&gt; folder as the source parameter of the &lt;code&gt;s2i build&lt;/code&gt; command. We can use the SDK builder images like before, but since the application is already built, we can use the smaller runtime image instead.&lt;/p&gt; &lt;pre&gt;$ s2i build bin/Release/netcoreapp2.1/publish mywebapp registry.redhat.io/dotnet/dotnet-21-runtime-rhel7:2.1 -p always &lt;/pre&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;In this article, you’ve learned how to create .NET Core application images using &lt;code&gt;s2i&lt;/code&gt;. These images can be built directly from a git repository, local sources, or a pre-built application.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F13%2Fbuilding-net-core-container-images-using-s2i%2F&amp;#38;linkname=Building%20.NET%20Core%20container%20images%20using%20S2I" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F13%2Fbuilding-net-core-container-images-using-s2i%2F&amp;#38;linkname=Building%20.NET%20Core%20container%20images%20using%20S2I" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F13%2Fbuilding-net-core-container-images-using-s2i%2F&amp;#38;linkname=Building%20.NET%20Core%20container%20images%20using%20S2I" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F13%2Fbuilding-net-core-container-images-using-s2i%2F&amp;#38;linkname=Building%20.NET%20Core%20container%20images%20using%20S2I" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F13%2Fbuilding-net-core-container-images-using-s2i%2F&amp;#38;linkname=Building%20.NET%20Core%20container%20images%20using%20S2I" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F13%2Fbuilding-net-core-container-images-using-s2i%2F&amp;#38;linkname=Building%20.NET%20Core%20container%20images%20using%20S2I" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F13%2Fbuilding-net-core-container-images-using-s2i%2F&amp;#38;linkname=Building%20.NET%20Core%20container%20images%20using%20S2I" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F13%2Fbuilding-net-core-container-images-using-s2i%2F&amp;#38;linkname=Building%20.NET%20Core%20container%20images%20using%20S2I" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F13%2Fbuilding-net-core-container-images-using-s2i%2F&amp;#038;title=Building%20.NET%20Core%20container%20images%20using%20S2I" data-a2a-url="https://developers.redhat.com/blog/2018/12/13/building-net-core-container-images-using-s2i/" data-a2a-title="Building .NET Core container images using S2I"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/12/13/building-net-core-container-images-using-s2i/"&gt;Building .NET Core container images using S2I&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/ZaQI5xLfUyw" height="1" width="1" alt=""/&gt;</content><summary>Red Hat OpenShift implements .NET Core support via a source-to-image (S2I) builder. In this article, we’ll take a closer look at how you can use that builder directly. Using S2I, you can build .NET Core application images without having to write custom build scripts or Dockerfiles. This can be useful on your development machine or as part of a CI/CD pipeline. Containers for your builds Container i...</summary><dc:creator>Tom Deseyn</dc:creator><dc:date>2018-12-13T17:26:11Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/12/13/building-net-core-container-images-using-s2i/</feedburner:origLink></entry><entry><title>Building Red Hat Mobile Applications on your own hardware</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/xCPiCW_fIFk/" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Feedhenry" scheme="searchisko:content:tags" /><category term="mobile" scheme="searchisko:content:tags" /><category term="Mobile Apps" scheme="searchisko:content:tags" /><category term="Red Hat Mobile Application Platform" scheme="searchisko:content:tags" /><category term="Red Hat Mobile Applications" scheme="searchisko:content:tags" /><category term="RHMAP" scheme="searchisko:content:tags" /><author><name>Evan Shortiss</name></author><id>searchisko:content:id:jbossorg_blog-building_red_hat_mobile_applications_on_your_own_hardware</id><updated>2018-12-13T13:00:18Z</updated><published>2018-12-13T13:00:18Z</published><content type="html">&lt;p&gt;This&lt;em&gt; guide is related to the recent deprecation of the &lt;a href="https://developers.redhat.com/products/mobileplatform/overview/"&gt;Red Hat Mobile Application Platform&lt;/a&gt; Build Farm. Throughout this guide, we&amp;#8217;ll guide you through the steps required to build on a machine of your own an application that was originally built using the Build Farm. Further information surrounding the Build Farm deprecation is available in &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_mobile_application_platform/4.7/html/4.7_patch_release_notes/"&gt;our product release notes&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &lt;h2&gt;Red Hat Mobile Supported Configurations Documentation&lt;/h2&gt; &lt;p&gt;Before getting started, it&amp;#8217;s important to be aware of the versions of the tools, frameworks, and SDKs that the Build Farm uses to build mobile applications. This information can be found on the Red Hat Mobile Application Platform &lt;a href="https://access.redhat.com/node/2357761"&gt;Supported Configurations page&lt;/a&gt;. This guide will call out the specific versions in each section and also note where you need to confirm versions for your specific project and/or requirements.&lt;span id="more-541387"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;This guide contains six primary sections:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;a href="#pre"&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#native-ios"&gt;Building native iOS applications&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#native-and"&gt;Building native Android applications&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#apache-ios"&gt;Building Apache Cordova applications for iOS&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#apache-and"&gt;Building Apache Cordova applications for Android&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#update"&gt;Updating Application connection tags&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt; &lt;h2&gt;&lt;a name="pre"&gt;&lt;/a&gt;Prerequisites&lt;/h2&gt; &lt;h3&gt;System requirements&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;Windows 10, macOS 10.11.5, and/or recent a Linux OS, for example, Ubuntu 14.04 or newer.&lt;/li&gt; &lt;li&gt;iOS applications will require a macOS machine to build; the minimum OS version required depends on your target iOS version since Xcode releases often require macOS updates.&lt;/li&gt; &lt;li&gt;A general guideline is a minimum of 4GB of RAM is required, and 8GB is recommended for all platforms.&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Software versions&lt;/h3&gt; &lt;p&gt;The following versions of software were used in the creation of this guide. More-recent releases are likely to work; however, minor adjustments that fall beyond the scope of this post might be necessary.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Android Studio 3.1&lt;/li&gt; &lt;li&gt;Xcode 8&lt;/li&gt; &lt;li&gt;Cordova CLI v6.3.1&lt;/li&gt; &lt;li&gt;Node.js v8.x&lt;/li&gt; &lt;li&gt;npm (this will be installed alongside Node.js)&lt;/li&gt; &lt;li&gt;FHC (Red Hat Mobile command-line tools) 7.2.0&lt;/li&gt; &lt;li&gt;Git 2.18&lt;/li&gt; &lt;li&gt;Ruby 2.4.2&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;We recommend using the &lt;a href="https://github.com/creationix/nvm"&gt;Node Version Manager&lt;/a&gt; to install and manage Node.js versions. Once Node.js is installed, you can install the recommended Cordova (necessary if you are building a Cordova application) and FHC versions using the following commands. Different versions of these tools can be installed at your own discretion by changing the &lt;code&gt;semver&lt;/code&gt; tag after the &lt;code&gt;@&lt;/code&gt; symbol in the following commands:&lt;/p&gt; &lt;pre&gt;$ npm install -g cordova@6.3.1 $ npm install -g fh-fhc@7.2.0 &lt;/pre&gt; &lt;p&gt;&lt;em&gt;&lt;strong&gt;NOTE: &lt;/strong&gt;Depending on your Node.js installation method, you may need to prefix these commands with a &lt;code&gt;sudo&lt;/code&gt; if an EACCESS error is reported during the installation. Always exercise caution when using &lt;code&gt;sudo&lt;/code&gt;. Installing Node.js via &lt;a href="https://github.com/creationix/nvm"&gt;Node Version Manager&lt;/a&gt; or following this &lt;a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally"&gt;npm guide&lt;/a&gt; also provides a workaround to avoid using &lt;code&gt;sudo&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Once these are installed, it is possible to execute &lt;code&gt;fhc&lt;/code&gt; and &lt;code&gt;cordova&lt;/code&gt; commands in a terminal. Finally, configure FHC using the &lt;code&gt;fhc target&lt;/code&gt;and &lt;code&gt;fhc login&lt;/code&gt; commands. Refer to the &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_mobile_application_platform/4.7/html-single/local_development_guide/index"&gt;FHC documentation&lt;/a&gt; for more information on this process.&lt;/p&gt; &lt;h3&gt;Access to source code via Git&lt;/h3&gt; &lt;p&gt;Access to your source code stored in Red Hat Mobile Application Platform is managed by Git. Please refer to &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_mobile_application_platform_hosted/3/html/local_development_guide/ssh-key-setup"&gt;our local development documentation&lt;/a&gt; to ensure you have correctly configured your Git installation and SSH keys before proceeding any further.&lt;/p&gt; &lt;p&gt;After you have configured Git SSH access, you can clone your application source code from Red Hat Mobile Application Platform to your machine. This can be achieved using the Git Clone URL that is displayed on the &lt;em&gt;Details&lt;/em&gt; screen of your application in Red Hat Mobile Application Platform, like so:&lt;/p&gt; &lt;pre&gt;$ git clone $GIT_CLONE_URL&lt;/pre&gt; &lt;p&gt;Alternatively, you can use FHC to clone your entire project locally; this still requires the Git and local development prerequisites to be fulfilled. Running the following command will clone all Client and Cloud code repositories for the project:&lt;/p&gt; &lt;pre&gt;$ fhc projects clone --project=$PROJECT_ID&lt;/pre&gt; &lt;h3&gt;&lt;a name="certs"&gt;&lt;/a&gt;Certificates and signing credentials&lt;/h3&gt; &lt;p&gt;You can obtain a copy of your signing credentials for both iOS and Android platforms from the &lt;em&gt;Credentials&lt;/em&gt; screen of the Red Hat Mobile Application Platform Studio as shown.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhmap-credential-screen.jpg"&gt;&lt;img class=" aligncenter wp-image-542307 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhmap-credential-screen-1024x567.jpg" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhmap-credential-screen-1024x567.jpg" alt="Credentials screen of the Red Hat Mobile Application Platform" width="640" height="354" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhmap-credential-screen-1024x567.jpg 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhmap-credential-screen-300x166.jpg 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhmap-credential-screen-768x425.jpg 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Alternatively, you can download the credentials via FHC using the following commands:&lt;/p&gt; &lt;pre&gt;# List and find your credential bundle ID $ fhc credential list # Download the bundle using the retrieved ID $ fhc credential download --id=$CREDENTIAL_ID --output=$OUTPUT_FILE_PATH&lt;/pre&gt; &lt;h4&gt;Android credentials&lt;/h4&gt; &lt;p&gt;When you uploaded your keystore to Red Hat Mobile Application Platform you had to split it using commands from &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_mobile_application_platform_hosted/3/html/mobile_developer_guide/mobile-developer-guide-publishing-apps#resources"&gt;our documentation&lt;/a&gt; into cert and key PEM files. If you still have the original keystore file, then you can skip this step and use that keystore for signing your application; otherwise, you&amp;#8217;ll need to follow these steps to re-create your keystore from the downloaded credentials.&lt;/p&gt; &lt;pre&gt;# Generate a cert.p12 file from the cert and key pem files you downloaded $ openssl pkcs12 -export -out cert.p12 \ -in rhmap-cert.pem -inkey rhmap-key.pem \ -passin pass:$OLD_PASSWORD -passout pass:$NEW_PASSWORD # Create a new keystore.jks file from the cert.p12 $ keytool -importkeystore -srckeystore cert.p12 \ -srcstoretype pkcs12 \ -destkeystore keystore.jks \ -deststoretype jks &lt;/pre&gt; &lt;p&gt;Each set of credentials in this new keystore file will have an alias that identifies it. To find the alias of your credentials, execute this command:&lt;/p&gt; &lt;pre&gt;$ keytool -list -keystore keystore.jks -v&lt;/pre&gt; &lt;p&gt;To change the alias, you can use the following command:&lt;/p&gt; &lt;pre&gt;$ keytool -changealias -keystore keystore.jks \ -alias $OLD_ALIAS -destalias $NEW_ALIAS&lt;/pre&gt; &lt;p&gt;You should now have a keystore file with your signing credentials and a known alias that you can use to sign production builds of your Android application.&lt;/p&gt; &lt;h4&gt;iOS credentials&lt;/h4&gt; &lt;p&gt;If you have already added your iOS credentials to your Mac, you can skip this step; otherwise, you need to download the signing credentials and add them to your Keychain and Xcode. To do this, ensure the files you downloaded from the Red Hat Mobile Application Platform or &lt;a href="https://developer.apple.com"&gt;developer.apple.com&lt;/a&gt; have the following extensions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Provisioning Profile: &lt;code&gt;mobileprovision&lt;/code&gt;&lt;/li&gt; &lt;li&gt;Certificate: &lt;code&gt;cer&lt;/code&gt;&lt;/li&gt; &lt;li&gt;Key: &lt;code&gt;p12&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;With the correct extensions, the files will appear with the icons visible in the screenshot below:&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/11/ios-credentials.png"&gt;&lt;img class=" aligncenter wp-image-542197 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/ios-credentials.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/ios-credentials.png" alt="iOS credentials" width="941" height="661" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/ios-credentials.png 941w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/ios-credentials-300x211.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/ios-credentials-768x539.png 768w" sizes="(max-width: 941px) 100vw, 941px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Once the files have the correct extensions, you can double-click them and macOS will take the appropriate action by adding the key and cert to your Keychain and adding the provisioning profile to Xcode.&lt;/p&gt; &lt;p&gt;&lt;em&gt;&lt;strong&gt;NOTE: &lt;/strong&gt;You will need to perform this action twice since Apple requires you to use credentials to create both Debug and Release builds of your iOS &lt;/em&gt;&lt;i&gt;application.&lt;/i&gt;&lt;/p&gt; &lt;h2&gt;&lt;a name="native-ios"&gt;&lt;/a&gt;Building native iOS applications&lt;/h2&gt; &lt;p&gt;At this point, you should have met the following prerequisites:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Signing key and certificate downloaded and installed in the macOS Keychain&lt;/li&gt; &lt;li&gt;Provisioning Profile downloaded and added to Xcode&lt;/li&gt; &lt;li&gt;Application source code cloned locally using Git or FHC&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;You now need to install the iOS project dependencies using CocoaPods. If you don&amp;#8217;t have CocoaPods installed, you can execute the following commands to install and configure it:&lt;/p&gt; &lt;pre&gt;$ gem install cocoapods $ pod setup &lt;/pre&gt; &lt;p&gt;&lt;em&gt;&lt;strong&gt;NOTE: &lt;/strong&gt;The &lt;code&gt;gem&lt;/code&gt; command might require you to use the &lt;code&gt;sudo&lt;/code&gt; prefix depending on how your Mac and Ruby installation is configured.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Once these commands are complete, you need to run the following from the root of the application source code directory:&lt;/p&gt; &lt;pre&gt;$ pod install&lt;/pre&gt; &lt;p&gt;This will install the various SDK components required by your application and once complete, it will instruct you to use the newly created &lt;code&gt;project-name.xcworkspace&lt;/code&gt; when working with your iOS application. Go ahead and open that file now.&lt;/p&gt; &lt;h3&gt;&lt;a name="create-dev-ios"&gt;&lt;/a&gt;Create a development (debug) build&lt;/h3&gt; &lt;p&gt;Choose your project from the left pane, which is known as the &lt;em&gt;Navigator&lt;/em&gt; in Xcode. This should allow you to view the &lt;em&gt;General&lt;/em&gt; tab from the center column. Expand the &lt;em&gt;Signing&lt;/em&gt; section and uncheck &lt;em&gt;Automatically manage signing&lt;/em&gt;. Next, expand the &lt;em&gt;Signing (Debug)&lt;/em&gt; section and choose a valid &lt;em&gt;Provisioning Profile&lt;/em&gt; using the dropdown. Do the same for the&lt;em&gt; Signing (Release)&lt;/em&gt; section. Also, verify that the&lt;em&gt; Bundle Identifier&lt;/em&gt; matches that of the provisioning profile you created or downloaded. Finally, configure the target SDK version and device type. An example is shown below.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhmap-xcode.png"&gt;&lt;img class=" aligncenter wp-image-542277 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhmap-xcode-1024x650.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhmap-xcode-1024x650.png" alt="rhmap-xcode" width="640" height="406" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhmap-xcode-1024x650.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhmap-xcode-300x191.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhmap-xcode-768x488.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Once you are finished configuring these settings, you’ll need to select the &lt;em&gt;Generic iOS Device&lt;/em&gt; type from the device selector in the top left. Next, select &lt;em&gt;Product &amp;#62; Archive&lt;/em&gt; to trigger a build. After the build completes successfully, you’ll be presented with a window that displays your build(s). Choose the latest build from the list, and then click &lt;em&gt;Export&lt;/em&gt; on the right. When prompted to select a distribution method, select &lt;em&gt;Development&lt;/em&gt;. On the next screen, choose&lt;em&gt; App Thinning&lt;/em&gt; options, if necessary, and select the manifest generation checkbox if you’d like to host the binary for download on your own server. Finally, select a Provisioning Profile, review the final IPA contents and click &lt;em&gt;Export&lt;/em&gt;.&lt;i&gt;&lt;/i&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhmap-xcode-export.png"&gt;&lt;img class=" aligncenter wp-image-542297 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhmap-xcode-export-1024x714.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhmap-xcode-export-1024x714.png" alt="rhmap-xcode-export" width="640" height="446" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhmap-xcode-export-1024x714.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhmap-xcode-export-300x209.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhmap-xcode-export-768x536.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;An IPA file will be exported to the chosen folder and can be distributed using your method of choice.&lt;/p&gt; &lt;h3&gt;Create a production (release) build&lt;/h3&gt; &lt;p&gt;The steps for creating a production build for iOS are the same as those for development: simply choose the appropriate packaging method on the &lt;em&gt;Archives&lt;/em&gt; screen—that is, AdHoc, Enterprise, or AppStore—and have the necessary production signing credentials available.&lt;/p&gt; &lt;h2&gt;&lt;a name="native-and"&gt;&lt;/a&gt;Building native Android applications&lt;/h2&gt; &lt;p&gt;At this point, you should have met the following prerequisites:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Regenerated keystore from PEM files (if necessary)&lt;/li&gt; &lt;li&gt;Application source code cloned locally using Git or FHC&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Launch Android Studio and open your project from the initial prompt or &lt;em&gt;File&lt;/em&gt; menu. If this is your first time launching Android Studio, you might be prompted to install an SDK using a dialog box similar to the one shown below. If this happens, follow the prompts and you&amp;#8217;ll be able to open your project after the downloads complete.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhmap-android-sdk-install.png"&gt;&lt;img class=" aligncenter wp-image-542337 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhmap-android-sdk-install.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhmap-android-sdk-install.png" alt="rhmap-android-sdk-install" width="912" height="712" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhmap-android-sdk-install.png 912w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhmap-android-sdk-install-300x234.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhmap-android-sdk-install-768x600.png 768w" sizes="(max-width: 912px) 100vw, 912px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;When your project opens, you should check the information pane at the bottom of the Android Studio UI and address any SDK or Gradle issues that it reports. In the screenshot below, you can see that the example application being used requires Android Platform SDK version 26 and it prompts you to click the link to install it. If this happens, you&amp;#8217;ll typically be prompted to install Build Tools for the same version after installing the Platform SDK.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhmap-android-sdk-prompt.png"&gt;&lt;img class=" aligncenter wp-image-542347 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhmap-android-sdk-prompt-1024x653.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhmap-android-sdk-prompt-1024x653.png" alt="rhmap-android-sdk-prompt" width="640" height="408" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhmap-android-sdk-prompt-1024x653.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhmap-android-sdk-prompt-300x191.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhmap-android-sdk-prompt-768x489.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;h3&gt;Create a debug build&lt;/h3&gt; &lt;p&gt;To create a debug build using Android Studio, simply choose &lt;em&gt;Build &amp;#62; Build APK(s)&lt;/em&gt; from the menu. Android Studio will provide a UI popup with a link to locate the generated APK, or you can typically find it in &lt;code&gt;app/build/outputs/apk&lt;/code&gt; in your source code directory.&lt;/p&gt; &lt;h3&gt;Create a production build&lt;/h3&gt; &lt;p&gt;Creating a production build uses the &lt;em&gt;Build &amp;#62; Generate Signed APK&lt;/em&gt; option. When prompted, choose your application from the list of options to sign, though it should be selected by default. Next, choose your production keystore using the &lt;em&gt;Choose Existing&lt;/em&gt; button. Enter the key password, alias, and keystore password and choose &lt;em&gt;Next&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screen-Shot-2018-09-14-at-13.26.05.png"&gt;&lt;img class=" aligncenter wp-image-542357 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screen-Shot-2018-09-14-at-13.26.05-1024x642.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screen-Shot-2018-09-14-at-13.26.05-1024x642.png" alt="rhmap-android-key-store" width="640" height="401" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screen-Shot-2018-09-14-at-13.26.05-1024x642.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screen-Shot-2018-09-14-at-13.26.05-300x188.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screen-Shot-2018-09-14-at-13.26.05-768x481.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screen-Shot-2018-09-14-at-13.26.05.png 1414w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Finally, choose the output folder or accept the default. Ensure &lt;em&gt;Build Type&lt;/em&gt; is set to release and then choose one or both &lt;em&gt;Signature Version&lt;/em&gt; options, depending on your target device versions; you can read more about signatures on &lt;a href="https://source.android.com/security/apksigning/v2.html#verification"&gt;source.android.com&lt;/a&gt;. Click &lt;em&gt;Finish&lt;/em&gt; and your signed APK will be available in the &lt;em&gt;APK Destination Folder&lt;/em&gt; for installation on devices.&lt;/p&gt; &lt;h2&gt;&lt;a name="apache-ios"&gt;&lt;/a&gt;Building Apache Cordova applications for iOS&lt;/h2&gt; &lt;p&gt;This guide uses specific versions of the Cordova tools and libraries to walk you through building a Cordova application locally. If your project relies on different versions, you will need to install those and configure your environment according to the requirements of those versions and your project. For more information on the versions of &lt;code&gt;cordova&lt;/code&gt;, &lt;code&gt;cordova-android&lt;/code&gt;, and &lt;code&gt;cordova-ios&lt;/code&gt; used by Red Hat Mobile Application Platform, please refer to our &lt;a href="https://access.redhat.com/node/2357761"&gt;supported configurations document&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Before proceeding further, ensure you&amp;#8217;ve met the following prerequisites:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Installed Node.js and npm&lt;/li&gt; &lt;li&gt;Installed the Cordova CLI v6.3.1&lt;/li&gt; &lt;li&gt;Installed Xcode&lt;/li&gt; &lt;li&gt;Cloned the application source code locally using Git or FHC&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;To get started, add the iOS platform to your project by running the following from the root of the source code folder:&lt;/p&gt; &lt;pre&gt;$ npm install $ cordova platform add ios@$VERSION&lt;/pre&gt; &lt;p&gt;This will initialize an iOS project in a &lt;code&gt;platforms/ios&lt;/code&gt; folder in the root of your project using the specified &lt;code&gt;&lt;em&gt;cordova-ios&lt;/em&gt; $VERSION&lt;/code&gt;. Per the Red Hat Mobile Application Platform supported configurations, the &lt;code&gt;$VERSION&lt;/code&gt; can be a value from 3.5.1 to 4.2.0. Recent releases might work, but were not supported by the Build Farm. This guide was designed using 4.2.0.&lt;/p&gt; &lt;p&gt;&lt;em&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;strong&gt;:&lt;/strong&gt; These&lt;/em&gt; &lt;em&gt;&lt;code&gt;cordova-ios&lt;/code&gt;&lt;/em&gt; &lt;em&gt;version ranges assumes the use of Xcode 8. If you are using Xcode 9, you may need to follow &lt;a href="https://stackoverflow.com/a/43935071"&gt;this guide&lt;/a&gt; to patch it for use with the version range of&lt;/em&gt; &lt;em&gt;&lt;code&gt;cordova-ios&lt;/code&gt;&lt;/em&gt; &lt;em&gt;in use here.&lt;/em&gt;&lt;/p&gt; &lt;h3&gt;Create a development (debug) iOS build&lt;/h3&gt; &lt;h4&gt;Using Xcode&lt;/h4&gt; &lt;p&gt;The process to create a development Cordova iOS build is the same as for native applications. Please refer to &lt;a href="#create-dev-ios"&gt;&amp;#8220;Create a development (debug) build&amp;#8221;&lt;/a&gt; in the &amp;#8220;Building native iOS applications&amp;#8221; section of this guide for instructions on creating a development build using Xcode.&lt;/p&gt; &lt;h4&gt;Using the Cordova CLI&lt;/h4&gt; &lt;p&gt;To create a signed debug build using the Cordova CLI, the &lt;code&gt;cordova build&lt;/code&gt; command with multiple arguments is required. These arguments are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Apple Developer Team ID (obtained by visiting &lt;a href="https://developer.apple.com/account/#/membership"&gt;developer.apple.com/account/#/membership&lt;/a&gt;)&lt;/li&gt; &lt;li&gt;A Code Sign Identity (should be “iPhone Developer” if you are using Xcode 8 and above)&lt;/li&gt; &lt;li&gt;Package Type (set to “development”)&lt;/li&gt; &lt;li&gt;Provisioning Profile ID (more on this below)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To obtain the Provisioning Profile ID, you can open the provisioning profile in a text editor and find the following lines:&lt;/p&gt; &lt;pre&gt;&amp;#60;key&amp;#62;UUID&amp;#60;/key&amp;#62; &amp;#60;string&amp;#62;THE-ID-WILL-BE-HERE&amp;#60;/string&amp;#62;&lt;/pre&gt; &lt;p&gt;Once you have the required information, you can build the application using the following command:&lt;/p&gt; &lt;pre&gt;$ cordova build ios --device \ --developmentTeam=$THE_TEAM_ID \ --codeSignIdentity="iPhone Developer" \ --packageType="development" \ --provisioningProfile=$THE_PROFILE_ID &lt;/pre&gt; &lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you receive a build failure with an error related to setting the build team, it can be resolved by opening the project in Xcode and setting the signing information and then retrying using the CLI.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Once the command finishes executing the build, it will print the path to the folder containing the IPA file that can be installed on devices.&lt;/p&gt; &lt;h3&gt;Create a production (release) iOS build&lt;/h3&gt; &lt;p&gt;The steps for creating a production build for iOS are the same as those for development; simply choose the appropriate packaging method—that is, AdHoc, Enterprise, or AppStore—and have the necessary signing credentials available.&lt;/p&gt; &lt;h2&gt;&lt;a name="apache-and"&gt;&lt;/a&gt;Building Apache Cordova applications for Android&lt;/h2&gt; &lt;p&gt;This guide uses the specific versions of the Cordova tools and libraries to walk you through building a Cordova application locally. If your project relies on different versions, you will need to install those and configure your environment according to the requirements of those versions and your project. For more information on the versions of &lt;code&gt;cordova&lt;/code&gt;, &lt;code&gt;cordova-android&lt;/code&gt;, and &lt;code&gt;cordova-ios&lt;/code&gt; used by Red Hat Mobile Application Platform, please refer to our &lt;a href="https://access.redhat.com/node/2357761"&gt;supported configurations document&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Before proceeding further, ensure you&amp;#8217;ve met the following prerequisites:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Installed Node.js and npm&lt;/li&gt; &lt;li&gt;Installed the Cordova CLI v6.3.1&lt;/li&gt; &lt;li&gt;Cloned the application source code locally using Git or FHC&lt;/li&gt; &lt;li&gt;JDK 8 installed and have set the &lt;code&gt;JAVA_HOME&lt;/code&gt; environment variable&lt;/li&gt; &lt;/ol&gt; &lt;h3&gt;Installing the Android development tools&lt;/h3&gt; &lt;p&gt;The setup required for building Cordova-based Android applications that were developed on Red Hat Mobile Application Platform diverges from the latest Apache Cordova and Android Studio installation guides. Please follow these steps to configure your environment for compatibility with your Red Hat Mobile Application Platform–based Apache Cordova Android applications.&lt;/p&gt; &lt;p&gt;To get started, create the necessary directories on your machine to house the Android SDK and tools.&lt;/p&gt; &lt;p&gt;Here are example commands to create the required folder structure on macOS or Linux:&lt;/p&gt; &lt;pre&gt;$ mkdir -p ~/android-sdk/tools&lt;/pre&gt; &lt;p&gt;Or on Windows:&lt;/p&gt; &lt;pre&gt;C:\Users\&amp;#60;username&amp;#62;\AppData\Local\android-sdk\tools&lt;/pre&gt; &lt;p&gt;Download the Android tools package for your chosen platform using one of the following links. Unzip these and place them into the &lt;code&gt;tools&lt;/code&gt; subdirectory created previously; they must be placed in the &lt;code&gt;tools&lt;/code&gt; subdirectory to work.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="http://dl-ssl.google.com/android/repository/tools_r25.2.5-windows.zip"&gt;Windows&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://dl-ssl.google.com/android/repository/tools_r25.2.5-macosx.zip"&gt;macOS&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://dl-ssl.google.com/android/repository/tools_r25.2.5-linux.zip"&gt;Linux&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Set the &lt;code&gt;ANDROID_HOME&lt;/code&gt; environment variable and point it to your installation; for example, on Linux/macOS, add this to your &lt;code&gt;bash_profile&lt;/code&gt; or similar configuration file:&lt;/p&gt; &lt;pre&gt;export ANDROID_HOME=~/.android-sdk&lt;/pre&gt; &lt;p&gt;You should also update your &lt;code&gt;PATH&lt;/code&gt; environment variable with the location of the Android tools:&lt;/p&gt; &lt;pre&gt;export PATH=${PATH}:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools&lt;/pre&gt; &lt;p&gt;Verify the installation by executing the &lt;code&gt;android&lt;/code&gt; command from a new terminal session that has these environment variables applied. If your environment is configured correctly, you will see the following window displayed. If not, verify you’ve followed the steps correctly and try again.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-28-at-16.54.25.png"&gt;&lt;img class=" aligncenter wp-image-542487 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-28-at-16.54.25.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-28-at-16.54.25.png" alt="rhmap-android-sdk-manager" width="812" height="612" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-28-at-16.54.25.png 812w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-28-at-16.54.25-300x226.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-28-at-16.54.25-768x579.png 768w" sizes="(max-width: 812px) 100vw, 812px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;h3 style="text-align: left;"&gt;Configure the project and install an Android SDK&lt;/h3&gt; &lt;p&gt;To determine which SDK version needs to be installed, run the following commands from the root of your project:&lt;/p&gt; &lt;pre&gt;$ npm install $ cordova platform add android@$VERSION $ cordova requirements android&lt;/pre&gt; &lt;p&gt;This will initialize an Android project in a &lt;code&gt;platforms/android&lt;/code&gt; folder in the root of your project using the specified &lt;code&gt;cordova-android $VERSION&lt;/code&gt;. Per the Red Hat Mobile Application Platform supported configurations, the &lt;code&gt;$VERSION&lt;/code&gt; can be a value from 3.5.1 to 5.2.0. Recent releases might work, but were not supported by the Build Farm. This guide was designed using 5.2.0.&lt;/p&gt; &lt;p&gt;The last command verifies your environment and that you have the appropriate Android target SDK installed. Here’s sample output from the requirements command; if your environment has been configured correctly up to this point, you should see similar output:&lt;/p&gt; &lt;pre&gt;Requirements check results for android: Java JDK: installed 1.8.0 Android SDK: installed Android target: not installed Please install Android target: "android-23". Hint: Open the SDK manager by running: /Users/eshortis/android-sdk/tools/android You will require: 1. "SDK Platform" for android-23 2. "Android SDK Platform-tools (latest) 3. "Android SDK Build-tools" (latest) Gradle: installed&lt;/pre&gt; &lt;p&gt;This tells you the specific Android SDK target and tools required for the project. To install the missing tools and SDK run the &lt;code&gt;android&lt;/code&gt; command to launch the &lt;em&gt;SDK Manager&lt;/em&gt; and select the corresponding checkbox(es) for the missing tools, for example, platform-tools, build-tools, and API Level 23 in the case of the above output and as shown in the following screenshots. You should also select &lt;em&gt;Extras &amp;#62; Android Support Repository&lt;/em&gt; from the bottom of the list in &lt;em&gt;SDK Manager&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-28-at-17.07.17.png"&gt;&lt;img class=" aligncenter wp-image-542577 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-28-at-17.07.17.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-28-at-17.07.17.png" alt="Android SDK Manager" width="812" height="612" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-28-at-17.07.17.png 812w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-28-at-17.07.17-300x226.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/Screenshot-2018-11-28-at-17.07.17-768x579.png 768w" sizes="(max-width: 812px) 100vw, 812px" /&gt;&lt;/a&gt;Once the various tools and SDK have downloaded and installed, you can verify your application requirements are met by running the &lt;code&gt;cordova requirements&lt;/code&gt; command again. Your output should be similar to the following:&lt;/p&gt; &lt;pre&gt;$ cordova requirements android Requirements check results for android: Java JDK: installed 1.8.0 Android SDK: installed Android target: installed android-23,Google Inc.:Google APIs:23 Gradle: installed&lt;/pre&gt; &lt;h3&gt;Create a debug Android build&lt;/h3&gt; &lt;p&gt;After confirming your environment is correctly configured using &lt;code&gt;cordova requirements&lt;/code&gt;, you can generate a debug build using the following command:&lt;/p&gt; &lt;pre&gt;$ cordova build android&lt;/pre&gt; &lt;p&gt;The APK files can be found in the folder at &lt;code&gt;platforms/android/app/build/outputs/apk&lt;/code&gt;. For debug builds, a file named &lt;code&gt;android-debug.apk&lt;/code&gt; is generated. You can install the application on an emulator or Android device connected by USB by issuing the &lt;code&gt;adb install&lt;/code&gt; command and passing to it as an argument the path to the APK that was created.&lt;/p&gt; &lt;h3&gt;Create a release Android build&lt;/h3&gt; &lt;p&gt;Creating a production build requires the original keystore you generated for your application. Please refer to the &lt;a href="#certs"&gt;&amp;#8220;Certificates and Signing Credentials&amp;#8221;&lt;/a&gt; section of this guide for more information on obtaining a keystore. With the keystore available, you can issue the following command to create a production build:&lt;/p&gt; &lt;pre&gt;cordova build android --release \ --keystore=$KEYSTORE_PATH \ --password=$KEYSTORE_PASS \ --storePassword=$KEYSTORE_STORE_PASS \ --alias=$KEYSTORE_ALIAS&lt;/pre&gt; &lt;p&gt;The resulting APK files will be placed in the same folder as the debug APK, but instead will be named &lt;code&gt;android-release.apk&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;&lt;a name="update"&gt;&lt;/a&gt;Updating application connection tags&lt;/h2&gt; &lt;p&gt;Previously, the Build Farm would either automatically generate a new Connection Tag for each build or it would allow you to specify a tag to use. The Build Farm would then inject this new Connection Tag information into the &lt;code&gt;fhconfig&lt;/code&gt; file in your application. Connection Tags are used to associate a specific build of a client/mobile application with a given cloud application instance in a given environment. You can read more about Connection Tags in &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_mobile_application_platform_hosted/3/html-single/mobile_developer_guide/#managing-app-connections-studio"&gt;our documentation&lt;/a&gt;. The documentation for the specific format for each platform is available using the following links:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_mobile_application_platform/4.7/html-single/client_sdk/index#cordova-setup"&gt;Cordova&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_mobile_application_platform/4.7/html-single/client_sdk/index#native-ios-swift-setup"&gt;iOS (Swift)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_mobile_application_platform/4.7/html-single/client_sdk/index#native-ios-objective-c-setup"&gt;iOS (Objective-C)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_mobile_application_platform/4.7/html-single/client_sdk/index#rhmap_server_connection_setup"&gt;Android&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;When building locally, you need to manually update the &lt;code&gt;fhconfig&lt;/code&gt; file in your source code with a new Connection Tag when you deem it necessary. You can create a new Connection Tag from the &lt;em&gt;Connections&lt;/em&gt; section of your project in the Studio. Alternatively, the following FHC command can be used to generate a new tag. You can find the necessary variables in the Studio or using FHC commands such as &lt;code&gt;fhc projects list&lt;/code&gt;, &lt;code&gt;fhc admin environments list&lt;/code&gt;, and &lt;code&gt;fhc projects apps read&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;$ fhc connections create --client=$CLIENT_APP_ID \ --cloud=$CLOUD_APP_ID --type=$APP_TYPE \ --env=$ENV --project=$PROJECT_ID&lt;/pre&gt; &lt;p&gt;Once the new tag is created, you can obtain the &lt;code&gt;fhconfig&lt;/code&gt; file from the &lt;em&gt;Connections &lt;/em&gt;screen of your project by clicking the C&lt;em&gt;onfigure &lt;/em&gt;button for the required tag, as shown.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhmpa-config.png"&gt;&lt;img class=" aligncenter wp-image-543067 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhmpa-config-1024x640.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhmpa-config-1024x640.png" alt="rhmap-config" width="640" height="400" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhmpa-config-1024x640.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhmpa-config-300x188.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhmpa-config-768x480.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/rhmpa-config.png 1588w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F13%2Fbuilding-red-hat-mobile-applications-on-your-own-hardware%2F&amp;#38;linkname=Building%20Red%20Hat%20Mobile%20Applications%20on%20your%20own%20hardware" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F13%2Fbuilding-red-hat-mobile-applications-on-your-own-hardware%2F&amp;#38;linkname=Building%20Red%20Hat%20Mobile%20Applications%20on%20your%20own%20hardware" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F13%2Fbuilding-red-hat-mobile-applications-on-your-own-hardware%2F&amp;#38;linkname=Building%20Red%20Hat%20Mobile%20Applications%20on%20your%20own%20hardware" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F13%2Fbuilding-red-hat-mobile-applications-on-your-own-hardware%2F&amp;#38;linkname=Building%20Red%20Hat%20Mobile%20Applications%20on%20your%20own%20hardware" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F13%2Fbuilding-red-hat-mobile-applications-on-your-own-hardware%2F&amp;#38;linkname=Building%20Red%20Hat%20Mobile%20Applications%20on%20your%20own%20hardware" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F13%2Fbuilding-red-hat-mobile-applications-on-your-own-hardware%2F&amp;#38;linkname=Building%20Red%20Hat%20Mobile%20Applications%20on%20your%20own%20hardware" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F13%2Fbuilding-red-hat-mobile-applications-on-your-own-hardware%2F&amp;#38;linkname=Building%20Red%20Hat%20Mobile%20Applications%20on%20your%20own%20hardware" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F13%2Fbuilding-red-hat-mobile-applications-on-your-own-hardware%2F&amp;#38;linkname=Building%20Red%20Hat%20Mobile%20Applications%20on%20your%20own%20hardware" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F13%2Fbuilding-red-hat-mobile-applications-on-your-own-hardware%2F&amp;#038;title=Building%20Red%20Hat%20Mobile%20Applications%20on%20your%20own%20hardware" data-a2a-url="https://developers.redhat.com/blog/2018/12/13/building-red-hat-mobile-applications-on-your-own-hardware/" data-a2a-title="Building Red Hat Mobile Applications on your own hardware"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/12/13/building-red-hat-mobile-applications-on-your-own-hardware/"&gt;Building Red Hat Mobile Applications on your own hardware&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/xCPiCW_fIFk" height="1" width="1" alt=""/&gt;</content><summary>This guide is related to the recent deprecation of the Red Hat Mobile Application Platform Build Farm. Throughout this guide, we’ll guide you through the steps required to build on a machine of your own an application that was originally built using the Build Farm. Further information surrounding the Build Farm deprecation is available in our product release notes. Red Hat Mobile Supported Configu...</summary><dc:creator>Evan Shortiss</dc:creator><dc:date>2018-12-13T13:00:18Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/12/13/building-red-hat-mobile-applications-on-your-own-hardware/</feedburner:origLink></entry><entry><title>Red Hat Container Development Kit 3.7 now available</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/gOG2POG5nTs/" /><category term="Announcement" scheme="searchisko:content:tags" /><category term="CDK" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="Container Development Kit" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="Developer Tools" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="minishift" scheme="searchisko:content:tags" /><category term="OKD" scheme="searchisko:content:tags" /><category term="Red Hat Container Development Kit" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift" scheme="searchisko:content:tags" /><author><name>Doug Tidwell</name></author><id>searchisko:content:id:jbossorg_blog-red_hat_container_development_kit_3_7_now_available</id><updated>2018-12-12T15:00:54Z</updated><published>2018-12-12T15:00:54Z</published><content type="html">&lt;p&gt;We are pleased to announce the availability of the &lt;a href="https://developers.redhat.com/products/cdk/overview/"&gt;Red Hat Container Development Kit&lt;/a&gt; (CDK) 3.7. CDK 3.7 is based on &lt;a href="https://www.okd.io/minishift/"&gt;Minishift&lt;/a&gt; v1.27.0, a command-line tool to quickly provision an &lt;a href="https://www.openshift.com/"&gt;OpenShift&lt;/a&gt; and &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; cluster on your local machine for developing cloud- and container-based applications. The CDK also includes OpenShift Container Platform v3.11.14. You can use the CDK on Windows, macOS, or Linux.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s a summary of the new features in CDK 3.7:&lt;/p&gt; &lt;p&gt;&lt;span id="more-546937"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;New features in CDK 3.7&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;Uses OpenShift v3.11.14 as the default container platform&lt;/li&gt; &lt;li&gt; &lt;p dir="ltr"&gt;Uses the native system keychain for storing passwords&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p dir="ltr"&gt;Improvements around timezone handling&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p dir="ltr"&gt;A VM driver for hyperkit (&lt;code class="code-style"&gt;--vm-driver hyperkit&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p dir="ltr"&gt;Use of registry.redhat.io for handling authorization and connection&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p dir="ltr"&gt;New system tray icon (technology preview) makes it easier to start/stop &lt;code&gt;minishift&lt;/code&gt; and select which profile to run. The icon appears the first time you run &lt;code class="code-style"&gt;minishift&lt;/code&gt;:&lt;/p&gt; &lt;article class="embedded-entity"&gt;&lt;img class=" alignnone size-medium wp-image-547277 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/12/System-tray-3-7.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/12/System-tray-3-7-300x121.png" alt="The CDK system tray icon" width="300" height="121" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/12/System-tray-3-7-300x121.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/System-tray-3-7.png 343w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/article&gt; &lt;p dir="ltr"&gt;In this example there are two profiles, &lt;code class="code-style"&gt;Minishift&lt;/code&gt; and &lt;code class="code-style"&gt;Faas-Tutorial-Nodejs&lt;/code&gt;. The &lt;code class="code-style"&gt;Faas-Tutorial-Nodejs&lt;/code&gt; profile is currently running.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;What is the CDK?&lt;/h2&gt; &lt;p&gt;The CDK is based on Red Hat Enterprise Linux and provides a pre-built container development environment to help you develop &lt;a href="https://developers.redhat.com/blog/category/containers/"&gt;container-based applications&lt;/a&gt; quickly using preconfigured and local versions of OpenShift (the industry-leading Kubernetes distribution). The containers you build can be easily deployed on any Red Hat container host or platform, including RHEL, Red Hat OpenStack Platform, and OpenShift Container Platform.&lt;/p&gt; &lt;h2&gt;Start developing with containers today&lt;/h2&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://developers.redhat.com/products/cdk/download/"&gt;Download CDK 3.7&lt;/a&gt; now. See the &lt;a href="https://developers.redhat.com/products/cdk"&gt;CDK product page&lt;/a&gt; for more information.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F12%2Fcdk-3-7-now-available%2F&amp;#38;linkname=Red%20Hat%20Container%20Development%20Kit%203.7%20now%20available" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F12%2Fcdk-3-7-now-available%2F&amp;#38;linkname=Red%20Hat%20Container%20Development%20Kit%203.7%20now%20available" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F12%2Fcdk-3-7-now-available%2F&amp;#38;linkname=Red%20Hat%20Container%20Development%20Kit%203.7%20now%20available" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F12%2Fcdk-3-7-now-available%2F&amp;#38;linkname=Red%20Hat%20Container%20Development%20Kit%203.7%20now%20available" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F12%2Fcdk-3-7-now-available%2F&amp;#38;linkname=Red%20Hat%20Container%20Development%20Kit%203.7%20now%20available" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F12%2Fcdk-3-7-now-available%2F&amp;#38;linkname=Red%20Hat%20Container%20Development%20Kit%203.7%20now%20available" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F12%2Fcdk-3-7-now-available%2F&amp;#38;linkname=Red%20Hat%20Container%20Development%20Kit%203.7%20now%20available" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F12%2Fcdk-3-7-now-available%2F&amp;#38;linkname=Red%20Hat%20Container%20Development%20Kit%203.7%20now%20available" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F12%2Fcdk-3-7-now-available%2F&amp;#038;title=Red%20Hat%20Container%20Development%20Kit%203.7%20now%20available" data-a2a-url="https://developers.redhat.com/blog/2018/12/12/cdk-3-7-now-available/" data-a2a-title="Red Hat Container Development Kit 3.7 now available"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/12/12/cdk-3-7-now-available/"&gt;Red Hat Container Development Kit 3.7 now available&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/gOG2POG5nTs" height="1" width="1" alt=""/&gt;</content><summary>We are pleased to announce the availability of the Red Hat Container Development Kit (CDK) 3.7. CDK 3.7 is based on Minishift v1.27.0, a command-line tool to quickly provision an OpenShift and Kubernetes cluster on your local machine for developing cloud- and container-based applications. The CDK also includes OpenShift Container Platform v3.11.14. You can use the CDK on Windows, macOS, or Linux. ...</summary><dc:creator>Doug Tidwell</dc:creator><dc:date>2018-12-12T15:00:54Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/12/12/cdk-3-7-now-available/</feedburner:origLink></entry><entry><title>Writing better Spring applications using SpringFu</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/NyZLpFCacEo/" /><category term="annotations" scheme="searchisko:content:tags" /><category term="code readability" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="flow control" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="kotlin" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift Container Platform" scheme="searchisko:content:tags" /><category term="Spring" scheme="searchisko:content:tags" /><category term="Spring Functional" scheme="searchisko:content:tags" /><category term="SpringFu" scheme="searchisko:content:tags" /><author><name>Faisal Masood</name></author><id>searchisko:content:id:jbossorg_blog-writing_better_spring_applications_using_springfu</id><updated>2018-12-12T13:00:47Z</updated><published>2018-12-12T13:00:47Z</published><content type="html">&lt;p&gt;&amp;#8220;Truth can only be found in one place: the code,&amp;#8221; &lt;a href="https://www.goodreads.com/book/show/3735293-clean-code"&gt;Robert C. Martin, &lt;em&gt;Clean Code: A Handbook of Agile Software Craftsmanship&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The way we structure our code has a direct impact on how understandable is it. Code that is easy to follow with no or less hidden functionality is much easier to maintain. It also makes it easier for our fellow programmers to track down bugs in the code. This helps us to avoid Venkat&amp;#8217;s &lt;a href="https://aidium.se/2015/06/tdd-with-venkat/"&gt;Jesus Driven Development&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The way I write Spring applications comprises heavy use of Spring &lt;a href="https://springframework.guru/spring-framework-annotations/"&gt;annotations.&lt;/a&gt; The problem with this approach is that partial flow of the application is controlled by annotations. The complete flow of my code is not in one place, that is, in my code. I need to look back to the documentation to understand the annotations&amp;#8217; behavior. By reading just the code, it is difficult to predict the flow of control.&lt;/p&gt; &lt;p&gt;Luckily, Spring has a new way to code to and it has been called Spring Functional or &lt;a href="https://github.com/spring-projects/spring-fu"&gt;SpringFu&lt;/a&gt;. In this article, I will use &lt;a href="https://kotlinlang.org"&gt;Kotlin&lt;/a&gt; to showcase some of the benefits you get from SpringFu.&lt;/p&gt; &lt;p&gt;&lt;span id="more-540267"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;SpringFu to the rescue&lt;/h2&gt; &lt;p&gt;Let&amp;#8217;s start with a simple Spring-based application using the annotations approach. The first annotation we meet is &lt;code&gt;@SpringBootApplication&lt;/code&gt; and it does &lt;a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-using-springbootapplication-annotation.html"&gt;many&lt;/a&gt; things. Surely this information is not captured in the code when you use this annotation, as you can see in the &amp;#8220;Code with annotations&amp;#8221; section below. When we proceed further in the code with annotations, &lt;a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/RestController.html"&gt;@RestController&lt;/a&gt; does a series of things which further complicates the readability of code with respect to the control flow.&lt;/p&gt; &lt;p&gt;&lt;code&gt;@RequestMapping&lt;/code&gt;, &lt;code&gt;@Autowired&lt;/code&gt;, and &lt;code&gt;@Component&lt;/code&gt; all add up to the problem I mentioned above. Spring has to use reflection, Kotlin &lt;a href="https://kotlinlang.org/docs/reference/classes.html#inheritance"&gt;open&lt;/a&gt; classes, and all kind of facilities to make this code (magic) work. What if my goal is to read the code—and only the code—to understand the control flow.&lt;/p&gt; &lt;p&gt;Reducing the usage of reflection will also help us in moving towards &lt;a href="https://www.graalvm.org"&gt;GraalVM&lt;/a&gt; based native code. First, take a look at the code with annotations below and see if you can get the flow of control. You can get a full example at my GitHub &lt;a href="https://github.com/masoodfaisal/spring-app-no-annotations"&gt;repository&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Code with annotations&lt;/h3&gt; &lt;pre&gt;@SpringBootApplication class SpringWithAnnotationsApplication fun main(args: Array&amp;#60;String&amp;#62;) { runApplication&amp;#60;SpringWithAnnotationsApplication&amp;#62;(*args) } @RestController @RequestMapping("/events") class EventHandler { @Autowired lateinit var eventService: EventService @GetMapping("/") fun getAllEvents () : List&amp;#60;Event&amp;#62; { return eventService.getAllEvents() } } @Component class EventService { fun getAllEvents() : List&amp;#60;Event&amp;#62;{ return listOf( Event(name = "event1", description = "desc1"), Event(name = "event2", description = "desc2") ) } } data class Event (val name: String, val description: String)&lt;/pre&gt; &lt;p&gt;Visit Stack Overflow (some say Stack Overflow is the true technical lead) and you can find many &lt;a href="https://stackoverflow.com/questions/49018415/proper-configuration-of-spring-boot-2-and-junit-5"&gt;questions&lt;/a&gt; about the right way to use annotations. The number and variety of questions will give you an idea of how important code readability is.&lt;/p&gt; &lt;p&gt;&amp;#8220;Programs must be written for people to read, and only incidentally for machines to execute,&amp;#8221; &lt;a href="https://en.wikiquote.org/wiki/Programming_languages"&gt;Abelson and Sussman&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Code with no annotations&lt;/h3&gt; &lt;p&gt;Now let&amp;#8217;s try to write the same code using the SpringFu approach. The code is more readable and I can follow the full flow by just reading it. The flow of the code below is as follows.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;I have a &lt;code&gt;main&lt;/code&gt; function which loads my &lt;code&gt;appSimple&lt;/code&gt; &lt;a href="https://en.wikipedia.org/wiki/Domain-specific_language"&gt;DSL&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;The &lt;code&gt;AppSimple&lt;/code&gt; DSL &lt;em&gt;imports&lt;/em&gt; the Spring beans (which I have loaded in the &lt;code&gt;eventBeans&lt;/code&gt; DSL) and configures what the server should do using the &lt;code&gt;eventRoutes&lt;/code&gt; DSL.&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;&lt;/h3&gt; &lt;pre&gt;//create an application //remember no @SpringBootApplication fun main(args: Array&amp;#60;String&amp;#62;) { appSimple.run() } //using the application dsl, i define what my service will listen to val appSimple = application { //use the beans i define import(eventBeans) //http server listens for this endpoint server { import(::eventRoutes) codecs { jackson() } } } //define beans val eventBeans = beans { bean&amp;#60;EventService&amp;#62;() bean&amp;#60;EventHandler&amp;#62;() } //define on what endpont i would be listening //@RestController //@RequestMapping("/events") //@GetMapping("/") fun eventRoutes(handler: EventHandler) = router { "/events".nest { GET("/", handler::generateResponse) } } //create the handler for http request class EventHandler(private val eventService: EventService) { fun generateResponse(request: ServerRequest) = ServerResponse.ok().body( BodyInserters.fromObject(eventService.getAllEvents()) ) } //business logic // no need to @Component class EventService { fun getAllEvents(): List&amp;#60;Event&amp;#62; { return mutableListOf( Event(name = "event1", description = "desc1"), Event(name = "event2", description = "desc2") ) } } data class Event(val name: String, val description: String)&lt;/pre&gt; &lt;h2&gt;No need to open classes&lt;/h2&gt; &lt;p&gt;When using annotations, we need to make all classes &lt;a href="https://kotlinlang.org/docs/reference/compiler-plugins.html"&gt;open&lt;/a&gt; in order for Spring to work. See the &lt;a href="https://github.com/masoodfaisal/spring-app-no-annotations/blob/master/spring-with-annotations/pom.xml"&gt;pom.xml&lt;/a&gt; section below from the &lt;a href="https://github.com/masoodfaisal/spring-app-no-annotations"&gt;code&lt;/a&gt;. With SpringFu, &lt;a href="https://docs.oracle.com/javase/tutorial/java/IandI/final.html"&gt;final classes&lt;/a&gt;  are acceptable. Note the usage of the &lt;em&gt;kotlin-maven-plugin &lt;/em&gt;below showcasing the use of automatically opening all the classes. This is some additional logic outside of my code and makes things difficult to read.&lt;/p&gt; &lt;pre&gt;&amp;#60;plugin&amp;#62; &amp;#60;artifactId&amp;#62;kotlin-maven-plugin&amp;#60;/artifactId&amp;#62; &amp;#60;groupId&amp;#62;org.jetbrains.kotlin&amp;#60;/groupId&amp;#62; &amp;#60;configuration&amp;#62; &amp;#60;args&amp;#62; &amp;#60;arg&amp;#62;-Xjsr305=strict&amp;#60;/arg&amp;#62; &amp;#60;/args&amp;#62;     &amp;#60;compilerPlugins&amp;#62;     &amp;#60;plugin&amp;#62;spring&amp;#60;/plugin&amp;#62;     &amp;#60;/compilerPlugins&amp;#62; &amp;#60;/configuration&amp;#62;   &amp;#60;dependencies&amp;#62;   &amp;#60;dependency&amp;#62;     &amp;#60;groupId&amp;#62;org.jetbrains.kotlin&amp;#60;/groupId&amp;#62;       &amp;#60;artifactId&amp;#62;kotlin-maven-allopen&amp;#60;/artifactId&amp;#62;       &amp;#60;version&amp;#62;${kotlin.version}&amp;#60;/version&amp;#62;     &amp;#60;/dependency&amp;#62;   &amp;#60;/dependencies&amp;#62; &amp;#60;/plugin&amp;#62;&lt;/pre&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;&lt;a href="https://github.com/spring-projects/spring-fu"&gt;SpringFu&lt;/a&gt; is an exciting new project that enables us to write cleaner, more-readable code and offers more control for Spring-based applications. It builds on your existing Java/Kotlin knowledge, which makes the task of learning it a bit easier. One of the exciting goals is to able to write native applications using &lt;a href="https://www.graalvm.org"&gt;GraalVM&lt;/a&gt;. Be aware that some of the SpringFu components are not production-ready yet.&lt;/p&gt; &lt;p&gt;Kotlin is an exciting new programming language especially if you are coming from a Java background. You can start your Kotlin journey by attending this &lt;a href="https://www.coursera.org/learn/kotlin-for-java-developers"&gt;coursera course&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;In addition, you might find these other Spring articles helpful.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F12%2Fwriting-better-spring-applications-using-springfu%2F&amp;#38;linkname=Writing%20better%20Spring%20applications%20using%20SpringFu" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F12%2Fwriting-better-spring-applications-using-springfu%2F&amp;#38;linkname=Writing%20better%20Spring%20applications%20using%20SpringFu" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F12%2Fwriting-better-spring-applications-using-springfu%2F&amp;#38;linkname=Writing%20better%20Spring%20applications%20using%20SpringFu" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F12%2Fwriting-better-spring-applications-using-springfu%2F&amp;#38;linkname=Writing%20better%20Spring%20applications%20using%20SpringFu" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F12%2Fwriting-better-spring-applications-using-springfu%2F&amp;#38;linkname=Writing%20better%20Spring%20applications%20using%20SpringFu" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F12%2Fwriting-better-spring-applications-using-springfu%2F&amp;#38;linkname=Writing%20better%20Spring%20applications%20using%20SpringFu" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F12%2Fwriting-better-spring-applications-using-springfu%2F&amp;#38;linkname=Writing%20better%20Spring%20applications%20using%20SpringFu" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F12%2Fwriting-better-spring-applications-using-springfu%2F&amp;#38;linkname=Writing%20better%20Spring%20applications%20using%20SpringFu" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F12%2Fwriting-better-spring-applications-using-springfu%2F&amp;#038;title=Writing%20better%20Spring%20applications%20using%20SpringFu" data-a2a-url="https://developers.redhat.com/blog/2018/12/12/writing-better-spring-applications-using-springfu/" data-a2a-title="Writing better Spring applications using SpringFu"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/12/12/writing-better-spring-applications-using-springfu/"&gt;Writing better Spring applications using SpringFu&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/NyZLpFCacEo" height="1" width="1" alt=""/&gt;</content><summary>“Truth can only be found in one place: the code,” Robert C. Martin, Clean Code: A Handbook of Agile Software Craftsmanship. The way we structure our code has a direct impact on how understandable is it. Code that is easy to follow with no or less hidden functionality is much easier to maintain. It also makes it easier for our fellow programmers to track down bugs in the code. This helps us to avoi...</summary><dc:creator>Faisal Masood</dc:creator><dc:date>2018-12-12T13:00:47Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/12/12/writing-better-spring-applications-using-springfu/</feedburner:origLink></entry><entry><title>Work on Apache Camel 3 has finally started</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/GtbcW8I2g00/work-on-apache-camel-3-has-finally.html" /><category term="apache camel" scheme="searchisko:content:tags" /><category term="feed_group_name_fusesource" scheme="searchisko:content:tags" /><category term="feed_name_clausibsen" scheme="searchisko:content:tags" /><category term="roadmap" scheme="searchisko:content:tags" /><author><name>Claus Ibsen</name></author><id>searchisko:content:id:jbossorg_blog-work_on_apache_camel_3_has_finally_started</id><updated>2018-12-12T10:04:30Z</updated><published>2018-12-12T10:04:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;We are starting the work on &lt;a href="http://camel.apache.org/2018/12/11/work-on-apache-camel-3-is-beginning.html"&gt;Apache Camel 3&lt;/a&gt;. We are working at multiple levels to improve Camel and introduce new features.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-Gw2sMXrosMc/XBDbnWE37BI/AAAAAAAAByk/xuB5MzD2sMQHXAgZb4Ogu8OSWvUHZiTgQCLcBGAs/s1600/IMG_8717.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="1600" data-original-width="1600" height="320" src="https://4.bp.blogspot.com/-Gw2sMXrosMc/XBDbnWE37BI/AAAAAAAAByk/xuB5MzD2sMQHXAgZb4Ogu8OSWvUHZiTgQCLcBGAs/s320/IMG_8717.jpg" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;The first work has actually started by Guillaume Nodet in the &lt;a href="http://camel.465427.n5.nabble.com/HEADS-UP-Camel-3-x-branch-tp5824287.html"&gt;start of October&lt;/a&gt;, where he jump started by cleaning up the codebase, removed deprecated code and components, improving the routing engine and other internals in the core. His work is published on the &lt;a href="https://github.com/apache/camel/tree/sandbox/camel-3.x"&gt;sandbox/3.x branch&lt;/a&gt;. We plan to use his work as the baseline for the actual Camel 3. Andrea has helped by aligning this branch with all the changes from the master branch (2.x) so its fully up to date. The intention is to switch over the sandbox/3.x branch as the new master branch, so we call can start working on that branch and being able to add new features, components etc. (as always) for Camel 3.&lt;br /&gt;&lt;br /&gt;For 2.x users we will create a 2.x branch where we plan to do 1 or 2 more last 2.x releases, eg 2.24 and 2.25, before 3.0 is ready and released.&lt;br /&gt;&lt;br /&gt;Here in the beginning of the Camel 3 work is to continue the work from Guillaume Nodet and finish up the cleanup of the codebase, modularize the camel-core, etc.&lt;br /&gt;&lt;br /&gt;We invite community users and any Camel committers and developers who has interest to help with the Camel 3 work. We have talked about doing a number of milestone releases of 3.x that can help give feedback to us quicker and faster. For example any Camel users of 2.x can try to upgrade and use the 3.0 milestone releases to report back their findings.&lt;br /&gt;&lt;br /&gt;Camel 3 is planned to be a time boxed release to avoid it dragging out “forever”, and with a bit of good luck we will have Camel 3 released after the summer 2019.&lt;br /&gt;&lt;br /&gt;We will keep the community posted on the progress, and as always we love &lt;a href="https://github.com/apache/camel/blob/master/CONTRIBUTING.md"&gt;contributions&lt;/a&gt; and any feedback you may have.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;The 3-humped Camel is coming in 2019 ;)&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=yg2Puuj61u8:AlbVRhxx6vE:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=yg2Puuj61u8:AlbVRhxx6vE:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=yg2Puuj61u8:AlbVRhxx6vE:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=yg2Puuj61u8:AlbVRhxx6vE:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=yg2Puuj61u8:AlbVRhxx6vE:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=yg2Puuj61u8:AlbVRhxx6vE:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=yg2Puuj61u8:AlbVRhxx6vE:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/ApacheCamel/~4/yg2Puuj61u8" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/GtbcW8I2g00" height="1" width="1" alt=""/&gt;</content><summary>We are starting the work on Apache Camel 3. We are working at multiple levels to improve Camel and introduce new features. The first work has actually started by Guillaume Nodet in the start of October, where he jump started by cleaning up the codebase, removed deprecated code and components, improving the routing engine and other internals in the core. His work is published on the sandbox/3.x bra...</summary><dc:creator>Claus Ibsen</dc:creator><dc:date>2018-12-12T10:04:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/ApacheCamel/~3/yg2Puuj61u8/work-on-apache-camel-3-has-finally.html</feedburner:origLink></entry><entry><title>Hibernate ORM 5.4.0.Final released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/t5PasTcJYak/" /><category term="feed_group_name_hibernate" scheme="searchisko:content:tags" /><category term="feed_name_inrelationto" scheme="searchisko:content:tags" /><category term="Hibernate ORM" scheme="searchisko:content:tags" /><category term="releases" scheme="searchisko:content:tags" /><author><name>Guillaume Smet</name></author><id>searchisko:content:id:jbossorg_blog-hibernate_orm_5_4_0_final_released</id><updated>2018-12-13T09:50:37Z</updated><published>2018-12-12T00:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We just released the final version of Hibernate ORM 5.4.0.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;It is designed to be a drop in replacement for ORM 5.3.x.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Apart from some changes to entity graphs to make them more user friendly, it’s all about bugfixes and polishing.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="what-s-new"&gt;&lt;a class="anchor" href="#what-s-new"&gt;&lt;/a&gt;What’s new&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="sect2"&gt; &lt;h3 id="bugfixes-and-documentation-improvements"&gt;&lt;a class="anchor" href="#bugfixes-and-documentation-improvements"&gt;&lt;/a&gt;Bugfixes and documentation improvements&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We fixed a couple of bugs and regressions and improved the documentation.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;You can find the full list of changes in this version &lt;a href="https://hibernate.atlassian.net/projects/HHH/versions/31738/tab/release-report-all-issues"&gt;here&lt;/a&gt; (or, for people without a Hibernate Jira account, &lt;a href="https://hibernate.atlassian.net/secure/ReleaseNote.jspa?version=31738&amp;amp;styleName=Html&amp;amp;projectId=10031"&gt;here&lt;/a&gt;).&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="so-what-s-new-compared-to-5-3-x"&gt;&lt;a class="anchor" href="#so-what-s-new-compared-to-5-3-x"&gt;&lt;/a&gt;So what’s new compared to 5.3.x?&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Please refer to the previous blog posts about the candidate releases:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://in.relation.to/2018/11/15/hibernate-orm-540-cr1-out/"&gt;CR1 announcement&lt;/a&gt;: entity graphs improvements, JDK 11 support&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://in.relation.to/2018/11/29/hibernate-orm-540-cr2-out/"&gt;CR2 announcement&lt;/a&gt;: JAXB upgrade&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The full list of changes made during the 5.4 release cycle can be found &lt;a href="https://hibernate.atlassian.net/browse/HHH-13156?jql=project%20%3D%20HHH%20AND%20fixVersion%20in%20(5.4.0%2C%205.4.0.CR1%2C%205.4.0.CR2)"&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="getting-5-4-0-final"&gt;&lt;a class="anchor" href="#getting-5-4-0-final"&gt;&lt;/a&gt;Getting 5.4.0.Final&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;All details are available and up to date on &lt;a href="http://hibernate.org/orm/releases/5.4/#get-it"&gt;the dedicated page on hibernate.org&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="what-s-next"&gt;&lt;a class="anchor" href="#what-s-next"&gt;&lt;/a&gt;What’s next?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We will release regular maintenance releases thereafter but the main focus of development is now Hibernate ORM 6.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="feedback-issues-ideas"&gt;&lt;a class="anchor" href="#feedback-issues-ideas"&gt;&lt;/a&gt;Feedback, issues, ideas?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To get in touch, use the usual channels:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/tagged/hibernate"&gt;&lt;strong&gt;hibernate&lt;/strong&gt; tag on Stack Overflow&lt;/a&gt; (usage questions)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/c/hibernate-orm"&gt;User forum&lt;/a&gt; (usage questions, general feedback)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://hibernate.atlassian.net/browse/HHH"&gt;Issue tracker&lt;/a&gt; (bug reports, feature requests)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://lists.jboss.org/pipermail/hibernate-dev/"&gt;Mailing list&lt;/a&gt; (development-related discussions)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/t5PasTcJYak" height="1" width="1" alt=""/&gt;</content><summary>We just released the final version of Hibernate ORM 5.4.0. It is designed to be a drop in replacement for ORM 5.3.x. Apart from some changes to entity graphs to make them more user friendly, it’s all about bugfixes and polishing. What’s new Bugfixes and documentation improvements We fixed a couple of bugs and regressions and improved the documentation. You can find the full list of changes in this...</summary><dc:creator>Guillaume Smet</dc:creator><dc:date>2018-12-12T00:00:00Z</dc:date><feedburner:origLink>http://in.relation.to/2018/12/12/hibernate-orm-540-final-out/</feedburner:origLink></entry></feed>
